<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在keil中使用Astyle格式化代码</title>
      <link href="/posts/d0d5c401/"/>
      <url>/posts/d0d5c401/</url>
      
        <content type="html"><![CDATA[<h2 id="Astyle是什么"><a href="#Astyle是什么" class="headerlink" title="Astyle是什么"></a>Astyle是什么</h2><p>Astyle的全称是Artistic Style，它是一个开源的源代码格式化工具，可以对C，C++，C#以及<a href="https://lib.csdn.net/base/javase">Java</a>等编程语言的源代码进行缩进、格式化、美化。<br>Home Page: <a href="https://astyle.sourceforge.net/">https://astyle.sourceforge.net/</a><br>Project Page: <a href="https://sourceforge.net/projects/astyle/">https://sourceforge.net/projects/astyle/</a></p><h2 id="如何在Keil中使用Astyle神器"><a href="#如何在Keil中使用Astyle神器" class="headerlink" title="如何在Keil中使用Astyle神器"></a>如何在Keil中使用Astyle神器</h2><p>在Keil μVision中集成Astyle（以下Keil μVison5为例），可以将凌乱的代码变得整齐起来，方便阅读。</p><h3 id="Keil中配置Astyle"><a href="#Keil中配置Astyle" class="headerlink" title="Keil中配置Astyle"></a>Keil中配置Astyle</h3><ol><li>下载Astyle，解压到任意位置（Astyle为绿色软件，无需安装）</li></ol><p><img src="https://media.canheting.cn//img/202208271516779.png" alt="AStyle_2.02.1_windows.zip"></p><p><img src="https://media.canheting.cn/img/202208271109569.png" alt="img"></p><ol><li><p>keil µVision5中单击Tools菜单—Customize Tools Menu</p><p><img src="https://media.canheting.cn/img/202208271110267.png"></p></li><li><p>添加Astyle All Files 和Astyle Current File菜单(自定义菜单名，可以随便起名)这里添加了两个菜单，分别是格式化当前文件和格式化project中的所有文件Command命令：在刚才解压的位置选择Astyle.exe。</p><p>Arguments：</p><p>Astyle Current File菜单填写 <code>!E</code></p><p>Astyle All Files菜单填写 <code>&quot;$E*.c&quot; &quot;$E*.h&quot;</code></p></li></ol><p><img src="https://media.canheting.cn//img/202208271517883.png" alt="img"></p><p><img src="https://media.canheting.cn//img/202208271517752.png" alt="img"><img src="https://media.canheting.cn//img/202208271518100.png" alt="img"></p><hr><h3 id="Keil使用Astyle格式化代码"><a href="#Keil使用Astyle格式化代码" class="headerlink" title="Keil使用Astyle格式化代码"></a>Keil使用Astyle格式化代码</h3><p>使用方式如下：</p><p><img src="https://media.canheting.cn//img/202208271519616.png" alt="img"></p><p>使用效果很不错，代码瞬间变得整齐了。</p><h3 id="Astyle的进阶配置"><a href="#Astyle的进阶配置" class="headerlink" title="Astyle的进阶配置"></a>Astyle的进阶配置</h3><p>以上配置在格式化代码时是使用的默认格式化配置。另外，Astyle支持配置代码格式化的格式。</p><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Astyle </tag>
            
            <tag> Keil </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows任务计划程序如何定时执行Python程序</title>
      <link href="/posts/b133e156/"/>
      <url>/posts/b133e156/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在 Windows 电脑上如果要实现定时执行 Python 程序，可以借助 Windows 任务计划程序。它是 Windows 操作系统自带的一个功能，可以让您在指定的时间或事件触发时自动执行某些操作。例如，您可以使用任务计划程序来定时执行 Python 脚本，或者在系统启动时自动打开某个程序。任务计划程序可以让您更加方便地管理您的计算机，并且可以帮助您提高工作效率。</p><h1 id="使用-Windows-任务计划程序"><a href="#使用-Windows-任务计划程序" class="headerlink" title="使用 Windows 任务计划程序"></a>使用 Windows 任务计划程序</h1><p>首先在 Windows 任务栏搜索<code>任务计划程序</code>,并打开。</p><p><img src="https://media.canheting.cn//img/202304021349463.png"></p><p><img src="https://media.canheting.cn//img/202304021349672.png"></p><h2 id="添加一个新的定时计划任务"><a href="#添加一个新的定时计划任务" class="headerlink" title="添加一个新的定时计划任务"></a>添加一个新的定时计划任务</h2><p><img src="https://media.canheting.cn//img/202304021350960.png"></p><h2 id="输入任务名称及描述"><a href="#输入任务名称及描述" class="headerlink" title="输入任务名称及描述"></a>输入任务名称及描述</h2><p>名称必填，描述可以选择是否填写。这里名称填写<code>阿里云盘签到</code>。<br><img src="https://media.canheting.cn//img/202304021350829.png"></p><h2 id="设置任务触发周期"><a href="#设置任务触发周期" class="headerlink" title="设置任务触发周期"></a>设置任务触发周期</h2><p>可以选择每天、每周、每月等。</p><p><img src="https://media.canheting.cn//img/202304021350890.png"></p><p>点击下一步，具体设置触发时间，如下图设置，从 2023.4.2 号开始，晚上 8 点执行，也就是每天晚上 8 点开始执行这个任务计划。</p><p><img src="https://media.canheting.cn//img/202304021350566.png"></p><h2 id="设置任务要执行的动作"><a href="#设置任务要执行的动作" class="headerlink" title="设置任务要执行的动作"></a>设置任务要执行的动作</h2><p>选择启动程序。<br><img src="https://media.canheting.cn//img/202304021350764.png"><br>点击下一步，启动程序需要填写以下参数：</p><ul><li>程序或者脚本(必填)：指的是任务需要执行的程序或者脚本。</li><li>添加参数(可选)：指的是上面的程序或者脚本要添加的参数。</li><li>起始于(可选)： 指的是上面的程序或者脚本工作的工作目录。</li></ul><h3 id="方式一：调用-python-解释器"><a href="#方式一：调用-python-解释器" class="headerlink" title="方式一：调用 python 解释器"></a>方式一：调用 python 解释器</h3><ul><li>程序或者脚本(必填)：这里填写 Python 编译器的路径，比如<code>D:\Python\Python310\python.exe</code></li><li>添加参数(可选)：定时执行 Python 程序，需要在这里填写打算执行的 Python 程序的完整路径，比如：<code>F:\Desktop\aliyunpan_sign\aliyunpan_sign.py</code></li><li>起始于(可选)： 这个可以不填，这里填写程序或者脚本所在文件夹即可，比如：<code>F:\Desktop\aliyunpan_sign</code></li></ul><p><img src="https://media.canheting.cn//img/202304021350041.png"></p><h3 id="方式二：调用-bat-命令"><a href="#方式二：调用-bat-命令" class="headerlink" title="方式二：调用 bat 命令"></a>方式二：调用 bat 命令</h3><p>首先新建一个文本文档，并修改文件后缀名为 bat，比如<code>aliyunpan_sign.bat</code>。打开文件，在里面填写以下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python “F:\Desktop\aliyunpan_sign\aliyunpan_sign.py”</span><br></pre></td></tr></table></figure><p>然后任务启动的参数列表参考下面内容进行天下：</p><ul><li>程序或者脚本(必填)：这里填写 bat 文件的路径，比如<code>F:\Desktop\aliyunpan_sign\aliyunpan_sign.bat</code></li><li>添加参数(可选)：这里不用填写</li><li>起始于(可选)： 这个可以不填，这里填写程序或者脚本所在文件夹即可，比如：<code>F:\Desktop\aliyunpan_sign</code></li></ul><p><img src="https://media.canheting.cn//img/202304021350182.png"></p><h2 id="确认任务并完成添加"><a href="#确认任务并完成添加" class="headerlink" title="确认任务并完成添加"></a>确认任务并完成添加</h2><p><img src="https://media.canheting.cn//img/202304021350577.png"><br>这样在设置的时间 Python 程序就会自动执行。</p><blockquote><p>但是请注意需要电脑开机才会执行。如果电脑开机后时间晚于任务执行时间会立即运行；如果开机时间早于任务执行时间，则会等待设置时间到了才会执行 Python 程序。</p></blockquote><h2 id="确认任务并完成添加-1"><a href="#确认任务并完成添加-1" class="headerlink" title="确认任务并完成添加"></a>确认任务并完成添加</h2><p><img src="https://media.canheting.cn//img/202304021351572.png"><br>这样在设置的时间 Python 程序就会自动执行。</p><blockquote><p>但是请注意需要电脑开机才会执行。如果电脑开机后时间晚于任务执行时间会立即运行；如果开机时间早于任务执行时间，则会等待设置时间到了才会执行 Python 程序。</p></blockquote><h2 id="测试任务参数是否添加正确"><a href="#测试任务参数是否添加正确" class="headerlink" title="测试任务参数是否添加正确"></a>测试任务参数是否添加正确</h2><p>在任务计划列表中找到刚才添加的任务，鼠标右键，运行一次，查看 Python 脚本程序是否可以正确运行。<br><img src="https://media.canheting.cn//img/202304021351325.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Windows </tag>
            
            <tag> 任务计划程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>香橙派迁移系统到新的SD卡</title>
      <link href="/posts/7a51f279/"/>
      <url>/posts/7a51f279/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刚开始用香橙派的时候，用的是一个 16G 的 SD 卡，但随着系统上装的软件越来越多，16G 的空间明显不够用了，于是我打算扩容一下，将 16G 的 SD 卡更换为 64G。但如果换一张大的 SD 卡，重新装系统，装软件、配置环境这些就比较麻烦了，因此考虑将系统迁移，以下方法适用于香橙派以及树莓派。</p><h1 id="迁移系统"><a href="#迁移系统" class="headerlink" title="迁移系统"></a>迁移系统</h1><blockquote><p>准备一张新的 SD 卡，一个 USB 读卡器。</p></blockquote><p>空间大于 64G 的 SD 卡一般默认是<code>exFAT</code>格式，而香橙派不识别<code>exFAT</code>格式，处理方法将 SD 卡格式化为<code>FAT32</code>格式。</p><p>Windows 系统格式化大于 32G 的 U 盘或者内存卡，只能选择<code>NTFS</code>、<code>exFAT</code>，无法直接格式化为<code>FAT32</code>格式。这里使用<code>DiskGenius</code> 来格式化 64G 的 SD 卡，具体方法今天先不介绍。</p><p><img src="https://media.canheting.cn/img/202302261728271.png"></p><p><img src="https://media.canheting.cn/img/202302261728022.png"></p><p>启动香橙派，利用读卡器把新 SD 卡插入树莓派 USB 口。</p><ol><li>在命令行输入<code>df -h</code>，查看 SD 卡是否识别。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">tmpfs           769M   18M  752M   3% /run</span><br><span class="line">/dev/mmcblk1p2   15G   12G  2.7G  82% /</span><br><span class="line">tmpfs           3.8G   16K  3.8G   1% /dev/shm</span><br><span class="line">tmpfs           5.0M  4.0K  5.0M   1% /run/lock</span><br><span class="line">tmpfs           3.8G   16K  3.8G   1% /tmp</span><br><span class="line">/dev/mmcblk1p1  256M   95M  162M  37% /boot</span><br><span class="line">/dev/zram1      188M   36M  138M  21% /var/log</span><br><span class="line">tmpfs           769M   72K  769M   1% /run/user/1000</span><br><span class="line">overlay          15G   12G  2.7G  82% /var/lib/docker/overlay2/8460f03e42d14c5691c112d65ab3ce80c4bae86aaec873980fd51d4e5847ddf5/merged</span><br><span class="line">overlaid        769M   72K  769M   1% /run/user/1000/orangepi-chromium</span><br><span class="line">tmpfs           769M   60K  769M   1% /run/user/0</span><br><span class="line">/dev/sda1        59G   96K   59G   1% /media/orangepi/thinkplus</span><br></pre></td></tr></table></figure><ol start="2"><li>卸载新 SD 卡<code>sudo umount /dev/sda1</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># sudo umount /dev/sda1</span></span><br><span class="line">root@orangepi5:~<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">tmpfs           769M   18M  752M   3% /run</span><br><span class="line">/dev/mmcblk1p2   15G   12G  2.7G  82% /</span><br><span class="line">tmpfs           3.8G   16K  3.8G   1% /dev/shm</span><br><span class="line">tmpfs           5.0M  4.0K  5.0M   1% /run/lock</span><br><span class="line">tmpfs           3.8G   16K  3.8G   1% /tmp</span><br><span class="line">/dev/mmcblk1p1  256M   95M  162M  37% /boot</span><br><span class="line">/dev/zram1      188M   36M  138M  21% /var/log</span><br><span class="line">tmpfs           769M   72K  769M   1% /run/user/1000</span><br><span class="line">overlay          15G   12G  2.7G  82% /var/lib/docker/overlay2/8460f03e42d14c5691c112d65ab3ce80c4bae86aaec873980fd51d4e5847ddf5/merged</span><br><span class="line">overlaid        769M   72K  769M   1% /run/user/1000/orangepi-chromium</span><br><span class="line">tmpfs           769M   60K  769M   1% /run/user/0</span><br></pre></td></tr></table></figure><ol start="3"><li>格式化 SD 卡<code>sudo mkfs.vfat /dev/sda1 -I</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># sudo mkfs.vfat /dev/sda1 -I</span></span><br><span class="line">mkfs.fat 4.2 (2021-01-31)</span><br></pre></td></tr></table></figure><ol start="4"><li>拷贝系统至新 SD 卡<code>sudo dd if=/dev/mmcblk1 of=/dev/sda bs=4M</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># sudo dd if=/dev/mmcblk1  of=/dev/sda  bs=4M</span></span><br><span class="line">3817+1 records <span class="keyword">in</span></span><br><span class="line">3817+1 records out</span><br><span class="line">16012804096 bytes (16 GB, 15 GiB) copied, 3144.95 s, 5.1 MB/s</span><br></pre></td></tr></table></figure><p><strong>拷贝时间较长，且中间过程无进度提示。</strong></p><p>没关系，教你一招，保证看到进度。新开一个 terminal，输入<code>sudo watch -n 5 pkill -USR1 ^dd$</code>，在返回刚才的窗口，是不是 5 秒刷新一次进度。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># sudo dd if=/dev/mmcblk1  of=/dev/sda  bs=4M</span></span><br><span class="line">306+0 records <span class="keyword">in</span></span><br><span class="line">306+0 records out</span><br><span class="line">1283457024 bytes (1.3 GB, 1.2 GiB) copied, 31.7812 s, 40.4 MB/s</span><br><span class="line">311+0 records <span class="keyword">in</span></span><br><span class="line">311+0 records out</span><br><span class="line">1304428544 bytes (1.3 GB, 1.2 GiB) copied, 37.4343 s, 34.8 MB/s</span><br><span class="line">316+0 records <span class="keyword">in</span></span><br><span class="line">316+0 records out</span><br><span class="line">1325400064 bytes (1.3 GB, 1.2 GiB) copied, 42.0409 s, 31.5 MB/s</span><br></pre></td></tr></table></figure><h1 id="新系统测试"><a href="#新系统测试" class="headerlink" title="新系统测试"></a>新系统测试</h1><p>香橙派关机后，拔出旧的 SD 卡，将新卡插入然后上电，可以正常启动。</p><p>但使用 <code>df -h</code> 查看依然为 16G，并没有生效，网上查了下，还需要手动修改分区大小，这里用的是 <code>fdisk</code> 命令，从 16G 扩展到 64G（实际可用58G）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">tmpfs           769M  9.5M  760M   2% /run</span><br><span class="line">/dev/mmcblk1p2   15G   12G  2.7G  82% /</span><br><span class="line">tmpfs           3.8G   16K  3.8G   1% /dev/shm</span><br><span class="line">tmpfs           5.0M  4.0K  5.0M   1% /run/lock</span><br><span class="line">tmpfs           3.8G   16K  3.8G   1% /tmp</span><br><span class="line">/dev/mmcblk1p1  256M   95M  162M  37% /boot</span><br><span class="line">/dev/zram1      188M   42M  132M  25% /var/log</span><br><span class="line">overlay          15G   12G  2.7G  82% /var/lib/docker/overlay2/8460f03e42d14c5691c112d65ab3ce80c4bae86aaec873980fd51d4e5847ddf5/merged</span><br><span class="line">tmpfs           769M   72K  769M   1% /run/user/1000</span><br><span class="line">overlaid        769M   72K  769M   1% /run/user/1000/orangepi-chromium</span><br><span class="line">tmpfs           769M   60K  769M   1% /run/user/0</span><br></pre></td></tr></table></figure><p>以下是扩容的步骤：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># sudo fdisk /dev/mmcblk1</span></span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.37.2).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, <span class="keyword">until</span> you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">This disk is currently <span class="keyword">in</span> use - repartitioning is probably a bad idea.</span><br><span class="line">It<span class="string">&#x27;s recommended to umount all file systems, and swapoff all swap</span></span><br><span class="line"><span class="string">partitions on this disk.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Command (m for help): p #查看当前容量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Disk /dev/mmcblk1: 58.25 GiB, 62542315520 bytes, 122152960 sectors</span></span><br><span class="line"><span class="string">Units: sectors of 1 * 512 = 512 bytes</span></span><br><span class="line"><span class="string">Sector size (logical/physical): 512 bytes / 512 bytes</span></span><br><span class="line"><span class="string">I/O size (minimum/optimal): 512 bytes / 512 bytes</span></span><br><span class="line"><span class="string">Disklabel type: gpt</span></span><br><span class="line"><span class="string">Disk identifier: 5916F58E-4D47-4B12-B663-32607503A1C0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Device          Start      End  Sectors  Size Type</span></span><br><span class="line"><span class="string">/dev/mmcblk1p1  61440   585727   524288  256M Linux extended boot</span></span><br><span class="line"><span class="string">/dev/mmcblk1p2 585728 30932991 30347264 14.5G Linux filesystem</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Command (m for help): d #先删除分区</span></span><br><span class="line"><span class="string">Partition number (1,2, default 2): 2 #/dev/mmcblk1p2，分区号是 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Partition 2 has been deleted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Command (m for help): n #新建分区，选择主分区就行，p</span></span><br><span class="line"><span class="string">Partition number (2-128, default 2): 2 #/dev/mmcblk1p2，分区号还是 2</span></span><br><span class="line"><span class="string">First sector (2048-122152926, default 585728): #起始扇区 参考上面的start，这里默认即可</span></span><br><span class="line"><span class="string">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (585728-122152926, default 122152926): #结尾扇区，这里默认即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Created a new partition 2 of type &#x27;</span>Linux filesystem<span class="string">&#x27; and of size 58 GiB.</span></span><br><span class="line"><span class="string">Partition #2 contains a ext4 signature.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Do you want to remove the signature? [Y]es/[N]o: y #如果旧的分区有签名信息，移除</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The signature will be removed by a write command.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Command (m for help): p #查看新分区信息，可以看到，58G 已经完全分配</span></span><br><span class="line"><span class="string">Disk /dev/mmcblk1: 58.25 GiB, 62542315520 bytes, 122152960 sectors</span></span><br><span class="line"><span class="string">Units: sectors of 1 * 512 = 512 bytes</span></span><br><span class="line"><span class="string">Sector size (logical/physical): 512 bytes / 512 bytes</span></span><br><span class="line"><span class="string">I/O size (minimum/optimal): 512 bytes / 512 bytes</span></span><br><span class="line"><span class="string">Disklabel type: gpt</span></span><br><span class="line"><span class="string">Disk identifier: 5916F58E-4D47-4B12-B663-32607503A1C0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Device          Start       End   Sectors  Size Type</span></span><br><span class="line"><span class="string">/dev/mmcblk1p1  61440    585727    524288  256M Linux extended boot</span></span><br><span class="line"><span class="string">/dev/mmcblk1p2 585728 122152926 121567199   58G Linux filesystem</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Filesystem/RAID signature on partition 2 will be wiped.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Command (m for help): w #写入</span></span><br><span class="line"><span class="string">The partition table has been altered.</span></span><br><span class="line"><span class="string">Syncing disks.</span></span><br></pre></td></tr></table></figure><p>接下来重启香橙派 <code>reboot</code>，重启之后更新文件系统大小：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># sudo resize2fs /dev/mmcblk1p2</span></span><br><span class="line">resize2fs 1.46.5 (30-Dec-2021)</span><br><span class="line">Filesystem at /dev/mmcblk1p2 is mounted on /; on-line resizing required</span><br><span class="line">old_desc_blocks = 1, new_desc_blocks = 4</span><br><span class="line">The filesystem on /dev/mmcblk1p2 is now 15195899 (4k) blocks long.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看新分区信息 <code>df -h</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">tmpfs           769M   18M  752M   3% /run</span><br><span class="line">/dev/mmcblk1p2   57G   12G   46G  21% /</span><br><span class="line">tmpfs           3.8G   16K  3.8G   1% /dev/shm</span><br><span class="line">tmpfs           5.0M  4.0K  5.0M   1% /run/lock</span><br><span class="line">tmpfs           3.8G   16K  3.8G   1% /tmp</span><br><span class="line">/dev/mmcblk1p1  256M   95M  162M  37% /boot</span><br><span class="line">/dev/zram1      188M   44M  131M  25% /var/log</span><br><span class="line">tmpfs           769M   60K  769M   1% /run/user/0</span><br><span class="line">overlay          57G   12G   46G  21% /var/lib/docker/overlay2/8460f03e42d14c5691c112d65ab3ce80c4bae86aaec873980fd51d4e5847ddf5/merged</span><br><span class="line">tmpfs           769M   72K  769M   1% /run/user/1000</span><br><span class="line">overlaid        769M   72K  769M   1% /run/user/1000/orangepi-chromium</span><br></pre></td></tr></table></figure><p>可以看到，扩容已完成。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/weixin_43444901/article/details/110260864">树莓派拷贝系统到新 SD 卡</a></li><li><a href="https://mp.weixin.qq.com/s/h-a7N65vBYRE6drImfHApA">超简单的树莓派 SD 卡扩容方案，将树莓派 16GB 内存卡克隆到 64GB 内存卡</a></li><li><a href="https://blog.csdn.net/Hallo_ween/article/details/107574829">香橙派 sd 卡扩容</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 香橙派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你1秒使用ChatGPT中文版无需账号</title>
      <link href="/posts/3687fa6b/"/>
      <url>/posts/3687fa6b/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ChatGPT 是由 OpenAI 开发的一款基于自然语言处理技术的聊天机器人。它通过自动分析用户发言，从语义上理解用户想表达的意思，并自动生成回复。<br>ChatGPT 不仅可以进行对话，还可以解答所提的问题、编写邮件、视频脚本、文案、翻译，甚至还能编写程序。可以说它是无所不能！ChatGPT 可以通过丰富多样的语句元素进行快速构建出多样化的问答模型，并实现自我学习，累积知识，越用越聪明。</p></blockquote><p><code>ChatGPT</code>最近霸屏了，但想要用上<code>ChatGPT</code>，很多人卡在注册账号这一步。</p><p>其实，不注册也是可以体验<code>ChatGPT</code>的强大功能的。</p><p>今天给大家推荐几个<code>ChatGPT</code>国内中文版，可快速体验<code>ChatGPT</code>，值得称赞的是它们不需要注册、不需要登录，打开即用。亲测可用，文末可直接获取链接。</p><p><img src="https://media.canheting.cn/img/202302191616543.png" alt="可点击图片放大查看"></p><p><img src="https://media.canheting.cn/img/202302191617329.png" alt="可点击图片放大查看"></p><ul><li><a href="https://xc.com/">https://xc.com/</a></li><li><a href="https://chat.forchhuoange.cn/">https://chat.forchhuoange.cn/</a></li><li><a href="https://aicodehelper.com/chat">https://aicodehelper.com/chat</a></li><li><a href="http://chat.h2ai.cn/home">http://chat.h2ai.cn/home</a></li></ul><p>最新可用国内版网站，持续更新中……</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>飞书机器人搭建教程</title>
      <link href="/posts/104912e1/"/>
      <url>/posts/104912e1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>飞书允许用户在群组中创建<code>自定义机器人</code>，值得称赞的是，飞书个人账号即可创建机器人，而不像其它的还需要注册一个企业，进行认证等一系列复杂操作后才可以使用机器人。在飞书创建机器人后，在其它渠道可通过 Webhook 的方式将消息发送到该群组中。</p><p>Webhook 即网络钩子，也称为用户自定义 HTTP 回调函数（<code>user-defined HTTP callbacks</code>），通常用于监听某些行为事件，当事件触发时会向用户指定的目标地址发送信息。飞书的机器人本质上也就是提供了一个<code>监听--&gt;通知</code>的行为逻辑，让用户能够将消息转发到飞书上。</p><h1 id="创建飞书机器人"><a href="#创建飞书机器人" class="headerlink" title="创建飞书机器人"></a>创建飞书机器人</h1><h2 id="安装飞书"><a href="#安装飞书" class="headerlink" title="安装飞书"></a>安装飞书</h2><p>首先去<a href="https://www.feishu.cn/">官网</a>下载飞书，进行安装。安装完毕，</p><p><img src="https://media.canheting.cn/img/202302191619318.png" alt="飞书可切换语言"></p><h2 id="创建群聊"><a href="#创建群聊" class="headerlink" title="创建群聊"></a>创建群聊</h2><p>飞书机器人是在群聊中使用的，因此需要先创建一个群组。</p><p>在飞书界面进行<code>点击加号-创建群组</code>。<br><img src="https://media.canheting.cn/img/202302191619220.png"><br>填写群组的相关信息，完成群组创建爱你。<br><img src="https://media.canheting.cn/img/202302191619020.png"></p><h2 id="添加自定义机器人"><a href="#添加自定义机器人" class="headerlink" title="添加自定义机器人"></a>添加自定义机器人</h2><p>在群组界面的<code>设置</code>中点击<code>群机器人</code>然后再点击<code>添加机器人</code>按钮进入到添加界面，选择第一位的「自定义机器人」。<br><img src="https://media.canheting.cn/img/202302191620782.png"></p><p><img src="https://media.canheting.cn/img/202302191620734.png"></p><p>然后填写机器人名称及描述相关信息，即可完成添加。</p><p><img src="https://media.canheting.cn/img/202302191620637.png"></p><p><img src="https://media.canheting.cn/img/202302191620684.png"></p><h1 id="飞书机器人使用"><a href="#飞书机器人使用" class="headerlink" title="飞书机器人使用"></a>飞书机器人使用</h1><p>在飞书群组中创建完<code>自定义机器人</code>时，会获得一个<code>webhook</code>地址，类似<code>https://open.feishu.cn/open-apis/bot/v2/hook/xxxxxxxxxxxxxxxxx</code>。这个地址可以在一些支持<code>webhook</code>的应用中使用，比如语雀、维格表。如果有一定编程基础，也可以自行开发。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://open.feishu.cn/document/ukTMukTMukTM/ucTM5YjL3ETO24yNxkjN">飞书自定义机器人指南</a></li><li><a href="https://sspai.com/post/68578">手把手教你用飞书 Webhook 打造一个消息推送 Bot</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 飞书机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云盘二月签到自动打卡脚本</title>
      <link href="/posts/6b7ef7f1/"/>
      <url>/posts/6b7ef7f1/</url>
      
        <content type="html"><![CDATA[<div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新记录</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023.02.23</p></div></div><div class='timeline-item-content'><p>新增多账号登录，在环境变量 <code>ali_refresh_token</code> 中可添加多个，用逗号 <strong>,</strong> 分开。</p><p><img src="https://media.canheting.cn/img/202302232301969.png" alt="image-20230223230104909"></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023.02.21</p></div></div><div class='timeline-item-content'><p>新增签到提醒，目前支持 <a href="http://www.pushplus.plus/">PushPlus</a> 和 <a href="https://sct.ftqq.com/">server 酱</a>（PushPlus 是我常用的推送渠道）。</p><p>本地运行，请自行在代码中修改 <code>PUSH_PLUS_TOKEN</code> 以及 <code>PUSH_KEY</code>。</p><p>青龙运行在配置中请至少配置一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUSH_PLUS_TOKEN = <span class="string">&#x27;&#x27;</span>  <span class="comment"># push+ 微信推送的用户令牌</span></span><br><span class="line">PUSH_KEY = <span class="string">&#x27;&#x27;</span>  <span class="comment"># server 酱的 PUSH_KEY，兼容旧版与 Turbo 版</span></span><br></pre></td></tr></table></figure><p><img src="https://media.canheting.cn/img/202302212230662.jpg"></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023.02.19</p></div></div><div class='timeline-item-content'><p>阿里云二月签到初版</p></div></div></div><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote><p>阿里云盘 2 月有个打卡活动，今天分享一个自动打卡 python 脚本，可以本地、青龙、云函数等自动执行。</p></blockquote><p><img src="https://media.canheting.cn/img/202302191541478.jpg"></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>自动打卡脚本需要使用阿里云盘的<code>refresh_token</code>，然后模拟人工进行签到。</p><p>首先打开并登录<a href="https://www.aliyundrive.com/drive" title="阿里云盘网页端">阿里云盘的网页端</a>，打开浏览器”开发者工具”–”应用”，按照下图找到<code>refresh_token</code>，并复制。</p><p><img src="https://media.canheting.cn/img/202302191543232.png" alt="获取阿里云盘refresh_token"></p><h1 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h1><h2 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h2><h3 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h3><p>首先下载脚本，<a href="https://media-1251347578.cos.ap-beijing.myqcloud.com/aliyunpan_sign.py" title="自动打卡 python 脚本">自动打卡 python 脚本</a>：<a href="https://media-1251347578.cos.ap-beijing.myqcloud.com/aliyunpan_sign.py">https://media-1251347578.cos.ap-beijing.myqcloud.com/aliyunpan_sign.py</a></p><p>公众号后台回复<code>阿里云盘签到</code>可获取最新脚本链接。</p><p>打开脚本后将<code>refresh_token</code>变量修改为在浏览器复制的<code>refresh_token</code>。</p><p><img src="https://media.canheting.cn/img/202302191544445.png" alt="放大查看原图"></p><h3 id="配置-python-运行环境"><a href="#配置-python-运行环境" class="headerlink" title="配置 python 运行环境"></a>配置 python 运行环境</h3><p>可自行前往<a href="https://www.python.org/" title="python 官网">python 官网</a>下载安装 python3 最新版本。</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">pip install loguru</span><br></pre></td></tr></table></figure><h3 id="运行脚本-1"><a href="#运行脚本-1" class="headerlink" title="运行脚本"></a>运行脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python aliyunpan_sign.py</span><br></pre></td></tr></table></figure><p>另外，在<code>Windows</code>上可以使用定时任务，在<code>Linux</code>上可以使用<code>crontab</code>，进行每天定时运行，代替人工进行签到。</p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://media.canheting.cn/img/202302191544641.png"></p><h2 id="青龙面板运行"><a href="#青龙面板运行" class="headerlink" title="青龙面板运行"></a>青龙面板运行</h2><h3 id="新增订阅"><a href="#新增订阅" class="headerlink" title="新增订阅"></a>新增订阅</h3><p>新增订阅地址：<a href="https://media-1251347578.cos.ap-beijing.myqcloud.com/aliyunpan_sign.py">https://media-1251347578.cos.ap-beijing.myqcloud.com/aliyunpan_sign.py</a><br><img src="https://media.canheting.cn/img/202302191544182.png"><br>添加订阅后，记得先运行一次</p><p><img src="https://media.canheting.cn/img/202302191544510.png"></p><h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>在青龙面板的依赖管理里，新增 python3 的依赖：<code>requests、loguru</code></p><h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>在青龙面板的环境里，新增<code>ali_refresh_token</code>变量，值为在浏览器复制的<code>refresh_token</code>。<br><img src="https://media.canheting.cn/img/202302191544205.png"></p><h3 id="运行脚本-2"><a href="#运行脚本-2" class="headerlink" title="运行脚本"></a>运行脚本</h3><p>然后在定时任务里面即可看到阿里云盘 2 月自动签到的脚本，运行时间为每天的 8 点 30。<br><img src="https://media.canheting.cn/img/202302191544395.png"></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>这个活动只是阿里云盘 2 月活动打卡，建议 2 月末停止自动执行。</p><p>停止脚本自动运行可参考以下步骤：</p><ol><li>在侧边栏订阅管理找到 <code>阿里云盘2月签到</code>，选中后删除。</li><li>在侧边栏定时任务找到 <code>阿里云盘2月自动签到</code>，选中后删除。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 阿里云盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32系列教程之空中升级OTA</title>
      <link href="/posts/3ede243a/"/>
      <url>/posts/3ede243a/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>配置好开发环境，本文是基于<code>VSCODE + PlatformIO</code></li><li>一个可用于联网的WiFi</li><li>编译一个.bin固件升级程序，并上传得到一个http网址。</li></ul><p>首先编写一个程序，每隔1s打印<code>hello world!</code>，并生成.bin升级固件。关于如何编译生成.bin升级固件，详见附录。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line">    Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="空中升级OTA代码说明"><a href="#空中升级OTA代码说明" class="headerlink" title="空中升级OTA代码说明"></a>空中升级<strong>OTA</strong>代码说明</h1><p>程序流程讲解：开机–&gt;等待联网–&gt;成功联网–&gt;升级。</p><ol><li>引入头文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;HTTPUpdate.h&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>根据实际添加相关变量：wifi的名称及密码、远程升级固件的地址</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********根据实际修改**********/</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *wifi_ssid = <span class="string">&quot;your wifi ssid&quot;</span>;        <span class="comment">// WIFI名称，区分大小写，不要写错</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *wifi_password = <span class="string">&quot;your wifi password &quot;</span>; <span class="comment">// WIFI密码</span></span><br><span class="line"><span class="comment">//远程固件链接，只支持http</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ota_url = <span class="string">&quot;http://media-1251347578.cos.ap-beijing.myqcloud.com/firmware.bin&quot;</span>;</span><br><span class="line"><span class="comment">/**********根据实际修改**********/</span></span><br></pre></td></tr></table></figure><ol start="3"><li>连接wifi</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WiFi.<span class="built_in">begin</span>(wifi_ssid, wifi_password); <span class="comment">//连接wifi</span></span><br><span class="line"><span class="keyword">while</span> (WiFi.<span class="built_in">status</span>() != WL_CONNECTED)</span><br><span class="line">&#123; <span class="comment">//等待连接wifi</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>远程固件升级</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 固件升级函数，通过http请求获取远程固件，实现升级</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param update_url 待升级远程固件bin文件的地址</span></span><br><span class="line"><span class="comment"> * @return t_httpUpdate_return 升级最终状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">t_httpUpdate_return <span class="title">updateBin</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *update_url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WiFiClient UpdateClient;</span><br><span class="line"></span><br><span class="line">    t_httpUpdate_return ret = httpUpdate.<span class="built_in">update</span>(UpdateClient, update_url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>【可选】升级过程回调函数，用于提示升级过程（失败、成功、升级进度等）</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当升级开始时，打印日志</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_started</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;CALLBACK:  HTTP update process started&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当升级结束时，打印日志</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_finished</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;CALLBACK:  HTTP update process finished&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当升级中，打印日志</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_progress</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> total)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.<span class="built_in">printf</span>(<span class="string">&quot;CALLBACK:  HTTP update process at %d of %d bytes[%.1f%%]...\n&quot;</span>, cur, total, cur * <span class="number">100.0</span> / total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当升级失败时，打印日志</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_error</span><span class="params">(<span class="type">int</span> err)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.<span class="built_in">printf</span>(<span class="string">&quot;CALLBACK:  HTTP update fatal error code %d\n&quot;</span>, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 固件升级函数，通过http请求获取远程固件，实现升级</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param update_url 待升级远程固件bin文件的地址</span></span><br><span class="line"><span class="comment"> * @return t_httpUpdate_return 升级最终状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">t_httpUpdate_return <span class="title">updateBin</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *update_url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;start update&quot;</span>);</span><br><span class="line">    WiFiClient UpdateClient;</span><br><span class="line"></span><br><span class="line">    httpUpdate.<span class="built_in">onStart</span>(update_started);     <span class="comment">//当升级开始时</span></span><br><span class="line">    httpUpdate.<span class="built_in">onEnd</span>(update_finished);      <span class="comment">//当升级结束时</span></span><br><span class="line">    httpUpdate.<span class="built_in">onProgress</span>(update_progress); <span class="comment">//当升级中</span></span><br><span class="line">    httpUpdate.<span class="built_in">onError</span>(update_error);       <span class="comment">//当升级失败时</span></span><br><span class="line"></span><br><span class="line">    t_httpUpdate_return ret = httpUpdate.<span class="built_in">update</span>(UpdateClient, update_url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序后，ESP32成功连接wifi即开始远程固件升级。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">Connection WIFI..........</span><br><span class="line">start update</span><br><span class="line">CALLBACK:  HTTP update process started</span><br><span class="line">CALLBACK:  HTTP update process at 0 of 232976 bytes[0.0%]...</span><br><span class="line">CALLBACK:  HTTP update process at 0 of 232976 bytes[0.0%]...</span><br><span class="line">CALLBACK:  HTTP update process at 4096 of 232976 bytes[1.8%]...</span><br><span class="line">CALLBACK:  HTTP update process at 8192 of 232976 bytes[3.5%]...</span><br><span class="line">CALLBACK:  HTTP update process at 12288 of 232976 bytes[5.3%]...</span><br><span class="line">CALLBACK:  HTTP update process at 16384 of 232976 bytes[7.0%]...</span><br><span class="line">CALLBACK:  HTTP update process at 20480 of 232976 bytes[8.8%]...</span><br><span class="line">CALLBACK:  HTTP update process at 24576 of 232976 bytes[10.5%]...</span><br><span class="line">CALLBACK:  HTTP update process at 28672 of 232976 bytes[12.3%]...</span><br><span class="line">CALLBACK:  HTTP update process at 32768 of 232976 bytes[14.1%]...</span><br><span class="line">CALLBACK:  HTTP update process at 36864 of 232976 bytes[15.8%]...</span><br><span class="line">CALLBACK:  HTTP update process at 40960 of 232976 bytes[17.6%]...</span><br><span class="line">CALLBACK:  HTTP update process at 45056 of 232976 bytes[19.3%]...</span><br><span class="line">CALLBACK:  HTTP update process at 49152 of 232976 bytes[21.1%]...</span><br><span class="line">CALLBACK:  HTTP update process at 53248 of 232976 bytes[22.9%]...</span><br><span class="line">CALLBACK:  HTTP update process at 57344 of 232976 bytes[24.6%]...</span><br><span class="line">CALLBACK:  HTTP update process at 61440 of 232976 bytes[26.4%]...</span><br><span class="line">CALLBACK:  HTTP update process at 65536 of 232976 bytes[28.1%]...</span><br><span class="line">CALLBACK:  HTTP update process at 69632 of 232976 bytes[29.9%]...</span><br><span class="line">CALLBACK:  HTTP update process at 73728 of 232976 bytes[31.6%]...</span><br><span class="line">CALLBACK:  HTTP update process at 77824 of 232976 bytes[33.4%]...</span><br><span class="line">CALLBACK:  HTTP update process at 81920 of 232976 bytes[35.2%]...</span><br><span class="line">CALLBACK:  HTTP update process at 86016 of 232976 bytes[36.9%]...</span><br><span class="line">CALLBACK:  HTTP update process at 90112 of 232976 bytes[38.7%]...</span><br><span class="line">CALLBACK:  HTTP update process at 94208 of 232976 bytes[40.4%]...</span><br><span class="line">CALLBACK:  HTTP update process at 98304 of 232976 bytes[42.2%]...</span><br><span class="line">CALLBACK:  HTTP update process at 102400 of 232976 bytes[44.0%]...</span><br><span class="line">CALLBACK:  HTTP update process at 106496 of 232976 bytes[45.7%]...</span><br><span class="line">CALLBACK:  HTTP update process at 110592 of 232976 bytes[47.5%]...</span><br><span class="line">CALLBACK:  HTTP update process at 114688 of 232976 bytes[49.2%]...</span><br><span class="line">CALLBACK:  HTTP update process at 118784 of 232976 bytes[51.0%]...</span><br><span class="line">CALLBACK:  HTTP update process at 122880 of 232976 bytes[52.7%]...</span><br><span class="line">CALLBACK:  HTTP update process at 126976 of 232976 bytes[54.5%]...</span><br><span class="line">CALLBACK:  HTTP update process at 131072 of 232976 bytes[56.3%]...</span><br><span class="line">CALLBACK:  HTTP update process at 135168 of 232976 bytes[58.0%]...</span><br><span class="line">CALLBACK:  HTTP update process at 139264 of 232976 bytes[59.8%]...</span><br><span class="line">CALLBACK:  HTTP update process at 143360 of 232976 bytes[61.5%]...</span><br><span class="line">CALLBACK:  HTTP update process at 147456 of 232976 bytes[63.3%]...</span><br><span class="line">CALLBACK:  HTTP update process at 151552 of 232976 bytes[65.1%]...</span><br><span class="line">CALLBACK:  HTTP update process at 155648 of 232976 bytes[66.8%]...</span><br><span class="line">CALLBACK:  HTTP update process at 159744 of 232976 bytes[68.6%]...</span><br><span class="line">CALLBACK:  HTTP update process at 163840 of 232976 bytes[70.3%]...</span><br><span class="line">CALLBACK:  HTTP update process at 167936 of 232976 bytes[72.1%]...</span><br><span class="line">CALLBACK:  HTTP update process at 172032 of 232976 bytes[73.8%]...</span><br><span class="line">CALLBACK:  HTTP update process at 176128 of 232976 bytes[75.6%]...</span><br><span class="line">CALLBACK:  HTTP update process at 180224 of 232976 bytes[77.4%]...</span><br><span class="line">CALLBACK:  HTTP update process at 184320 of 232976 bytes[79.1%]...</span><br><span class="line">CALLBACK:  HTTP update process at 188416 of 232976 bytes[80.9%]...</span><br><span class="line">CALLBACK:  HTTP update process at 192512 of 232976 bytes[82.6%]...</span><br><span class="line">CALLBACK:  HTTP update process at 196608 of 232976 bytes[84.4%]...</span><br><span class="line">CALLBACK:  HTTP update process at 200704 of 232976 bytes[86.1%].</span><br><span class="line">..</span><br><span class="line">CALLBACK:  HTTP update process at 204800 of 232976 bytes[87.9%]...</span><br><span class="line">CALLBACK:  HTTP update process at 208896 of 232976 bytes[89.7%]...</span><br><span class="line">CALLBACK:  HTTP update process at 212992 of 232976 bytes[91.4%]...</span><br><span class="line">CALLBACK:  HTTP update process at 217088 of 232976 bytes[93.2%]...</span><br><span class="line">CALLBACK:  HTTP update process at 221184 of 232976 bytes[94.9%]...</span><br><span class="line">CALLBACK:  HTTP update process at 225280 of 232976 bytes[96.7%]...</span><br><span class="line">CALLBACK:  HTTP update process at 229376 of 232976 bytes[98.5%]...</span><br><span class="line">CALLBACK:  HTTP update process at 232976 of 232976 bytes[100.0%]...</span><br><span class="line">CALLBACK:  HTTP update process at 232976 of 232976 bytes[100.0%]...</span><br><span class="line">CALLBACK:  HTTP update process finished</span><br></pre></td></tr></table></figure><p>升级完毕会运行升级的程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="1-远程固件链接需为http协议"><a href="#1-远程固件链接需为http协议" class="headerlink" title="1. 远程固件链接需为http协议"></a>1. 远程固件链接需为http协议</h2><p>使用OTA升级，远程固件链接不支持https协议。如果使用了https，将升级失败。<br>例如，将远程固件链接更换为https协议</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//远程固件链接</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ota_url = <span class="string">&quot;https://media-1251347578.cos.ap-beijing.myqcloud.com/firmware.bin&quot;</span>;</span><br></pre></td></tr></table></figure><p>ESP运行时，进行OTA升级，会返回400失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Connection WIFI..........</span><br><span class="line">start update</span><br><span class="line">[  6077][E][HTTPUpdate.cpp:380] handleUpdate(): HTTP Code is (400)</span><br><span class="line"></span><br><span class="line">[update] Update failed.</span><br></pre></td></tr></table></figure><h2 id="2-远程链接确保为ESP32编译后固件"><a href="#2-远程链接确保为ESP32编译后固件" class="headerlink" title="2. 远程链接确保为ESP32编译后固件"></a>2. 远程链接确保为ESP32编译后固件</h2><p>如果远程固件地址为非正常编译后bin文件，OTA升级会有校验，升级失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Connection WIFI.....</span><br><span class="line">start update</span><br><span class="line">CALLBACK:  HTTP update process started</span><br><span class="line">[  4281][E][HTTPUpdate.cpp:323] handleUpdate(): Magic header does not start with 0xE9</span><br><span class="line"></span><br><span class="line">[update] Update failed.</span><br></pre></td></tr></table></figure><p>从中串口打印的提示信息可以看出，OTA是校验远程链接文件开头是不是0xE9。使用winhex打开编译后的固件文件，确实可以看到开始是0xE9。<br><img src="https://media.canheting.cn/img/202210230019849.png" alt="image.png"></p><h1 id="附录1-ESP32空中升级OTA完整代码"><a href="#附录1-ESP32空中升级OTA完整代码" class="headerlink" title="附录1 ESP32空中升级OTA完整代码"></a>附录1 ESP32空中升级OTA完整代码</h1><p>完整代码可在GitHub下载：<a href="https://github.com/canhetingsky/ESP32_DEV/tree/master/ESP32_OTA">canhetingsky&#x2F;ESP32_DEV&#x2F;ESP32_OTA</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;HTTPUpdate.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********根据实际修改**********/</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *wifi_ssid = <span class="string">&quot;your wifi ssid&quot;</span>;        <span class="comment">// WIFI名称，区分大小写，不要写错</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *wifi_password = <span class="string">&quot;your wifi password &quot;</span>; <span class="comment">// WIFI密码</span></span><br><span class="line"><span class="comment">//远程固件链接，只支持http</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ota_url = <span class="string">&quot;http://media-1251347578.cos.ap-beijing.myqcloud.com/firmware.bin&quot;</span>;</span><br><span class="line"><span class="comment">/**********根据实际修改**********/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当升级开始时，打印日志</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_started</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;CALLBACK:  HTTP update process started&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当升级结束时，打印日志</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_finished</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;CALLBACK:  HTTP update process finished&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当升级中，打印日志</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_progress</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> total)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.<span class="built_in">printf</span>(<span class="string">&quot;CALLBACK:  HTTP update process at %d of %d bytes[%.1f%%]...\n&quot;</span>, cur, total, cur * <span class="number">100.0</span> / total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当升级失败时，打印日志</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_error</span><span class="params">(<span class="type">int</span> err)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.<span class="built_in">printf</span>(<span class="string">&quot;CALLBACK:  HTTP update fatal error code %d\n&quot;</span>, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @brief 固件升级函数，通过http请求获取远程固件，实现升级</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @param update_url 待升级远程固件bin文件的地址</span></span><br><span class="line"><span class="comment">* @return t_httpUpdate_return 升级最终状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">t_httpUpdate_return <span class="title">updateBin</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *update_url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;start update&quot;</span>);</span><br><span class="line">    WiFiClient UpdateClient;</span><br><span class="line"></span><br><span class="line">    httpUpdate.<span class="built_in">onStart</span>(update_started);     <span class="comment">//当升级开始时</span></span><br><span class="line">    httpUpdate.<span class="built_in">onEnd</span>(update_finished);      <span class="comment">//当升级结束时</span></span><br><span class="line">    httpUpdate.<span class="built_in">onProgress</span>(update_progress); <span class="comment">//当升级中</span></span><br><span class="line">    httpUpdate.<span class="built_in">onError</span>(update_error);       <span class="comment">//当升级失败时</span></span><br><span class="line"></span><br><span class="line">    t_httpUpdate_return ret = httpUpdate.<span class="built_in">update</span>(UpdateClient, update_url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.<span class="built_in">begin</span>(<span class="number">115200</span>); <span class="comment">//波特率115200</span></span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;Connection WIFI&quot;</span>);</span><br><span class="line">    WiFi.<span class="built_in">begin</span>(wifi_ssid, wifi_password); <span class="comment">//连接wifi</span></span><br><span class="line">    <span class="keyword">while</span> (WiFi.<span class="built_in">status</span>() != WL_CONNECTED)</span><br><span class="line">        &#123; <span class="comment">//等待连接wifi</span></span><br><span class="line">            <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">            Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    t_httpUpdate_return ret = <span class="built_in">updateBin</span>(ota_url); <span class="comment">//开始升级</span></span><br><span class="line">    <span class="keyword">switch</span> (ret)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> HTTP_UPDATE_FAILED: <span class="comment">//当升级失败</span></span><br><span class="line">                Serial.<span class="built_in">println</span>(<span class="string">&quot;[update] Update failed.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HTTP_UPDATE_NO_UPDATES: <span class="comment">//当无升级</span></span><br><span class="line">                Serial.<span class="built_in">println</span>(<span class="string">&quot;[update] Update no Update.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HTTP_UPDATE_OK: <span class="comment">//当升级成功</span></span><br><span class="line">                Serial.<span class="built_in">println</span>(<span class="string">&quot;[update] Update ok.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="附录2-如何编译生成-bin升级固件"><a href="#附录2-如何编译生成-bin升级固件" class="headerlink" title="附录2 如何编译生成.bin升级固件"></a>附录2 如何编译生成.bin升级固件</h1><h2 id="PlatformIO编译生成-bin固件"><a href="#PlatformIO编译生成-bin固件" class="headerlink" title="PlatformIO编译生成.bin固件"></a>PlatformIO编译生成.bin固件</h2><p>在项目文件夹下的<code>.pio\build\esp32dev</code>，可以找到编译后固件<code>firmware.bin</code><strong>。</strong><br><img src="https://media.canheting.cn/img/202210230019970.png" alt="image.png"></p><h2 id="Arduino-IDE编译生成-bin固件"><a href="#Arduino-IDE编译生成-bin固件" class="headerlink" title="Arduino IDE编译生成.bin固件"></a>Arduino IDE编译生成.bin固件</h2><p>使用Arduino IDE开发ESP32，需要配置好开发环境。<br>在Arduino IDE中，依次点击「项目」-「导出已编译的二进制文件」，编译完毕，即可在项目文件夹下看到生成的的<code>.bin</code>文件。<br><img src="https://media.canheting.cn/img/202210230018553.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
            <tag> OTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32系列教程之SmartConfig智能配网</title>
      <link href="/posts/5da28d89/"/>
      <url>/posts/5da28d89/</url>
      
        <content type="html"><![CDATA[<h1 id="SmartConfig介绍"><a href="#SmartConfig介绍" class="headerlink" title="SmartConfig介绍"></a><strong>SmartConfig介绍</strong></h1><p>随着越来越多智能家居设备进入家庭，这些产品大部分都是要连接家庭的WiFi网络的。而WiFi网络的接入需要知道无线路由器的名称（SSID）和密码，绝大多数的智能家居是没有输入接口的，在设备中预先设置WiFi的名称和密码显然是不现实的，这样对于智能家居要连接的无线路由器输入无线路由器的名字和密码就成了一个困难。为了克服这个问题，人们使用了多种配网方法，比如智能家居热点配网，手机热点配网，蓝牙辅助配网等等，这些配网方式都存在一定的不方便之处，而smartConfig配网方式是这些无线配网方式里面比较方便和快捷的配网方式之一。<br>ESP8266、ESP32使用了ESP-Touch协议，它适用于TI开发的SmartConfig技术。SmartConfig又名快连，用于将基于Wi-Fi的新型物联网设备连接到Wi-Fi网络。当前设备在没有和其他设备建立任何实际性通信链接的状态下，一键配置该设备接入WIFI。<br>smartconfig的配网基本原理是通过手机直接发送报文到待配网设备。手机发送UDP广播报文，待配网设备扫描所有的可用无线信道，找到发送smartConfig的报文，并锁定在这一信道上开始接收数据。<br><img src="https://media.canheting.cn/img/202210230003927.png"><br>smartconfig完成配网主要分以下3个步骤：</p><ol><li>设备进入初始化状态，开始监听附近的WiFi数据包。</li><li>手机&#x2F;平板设置WiFi名称和密码后，发送UDP广播包。</li><li>设备通过UDP包（长度）获取配置信息，切换网络模式，连接上家里WiFi，配置完成。</li></ol><h1 id="SmartConfig智能配网代码说明"><a href="#SmartConfig智能配网代码说明" class="headerlink" title="SmartConfig智能配网代码说明"></a>SmartConfig智能配网代码说明</h1><ol><li>引入头文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>SmartConfig智能配网</li></ol><p>SmartConfig智能配网用到的主要函数为<code>WiFi.beginSmartConfig()</code>。通过查询SmartConfig连接状态判断WiFi是否连接成功，用到的主要函数为<code>WiFi.smartConfigDone()</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">smart_config</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Init WiFi as Station, start SmartConfig</span></span><br><span class="line">    WiFi.<span class="built_in">mode</span>(WIFI_AP_STA);</span><br><span class="line">    WiFi.<span class="built_in">beginSmartConfig</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for SmartConfig packet from mobile</span></span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Waiting for SmartConfig.&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (!WiFi.<span class="built_in">smartConfigDone</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;SmartConfig received.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for WiFi to connect to AP</span></span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Waiting for WiFi&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (WiFi.<span class="built_in">status</span>() != WL_CONNECTED)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WiFi.<span class="built_in">setAutoConnect</span>(<span class="literal">true</span>); <span class="comment">// 设置自动连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>开机自动连接WiFi</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">connect_wifi</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WiFi.<span class="built_in">mode</span>(WIFI_STA);</span><br><span class="line">    WiFi.<span class="built_in">begin</span>(); <span class="comment">//启动WIFI连接</span></span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Connection WIFI&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> retry_count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (retry_count &lt; MAX_RETRY)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        retry_count++;</span><br><span class="line">        <span class="keyword">if</span> (WiFi.<span class="built_in">status</span>() == WL_CONNECTED) <span class="comment">//检查连接状态</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>开机判断联网方式，初次联网，则进入SmartConfig智能配网</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup_wifi</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">connect_wifi</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">smart_config</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Connection WIFI</span><br><span class="line">..........Waiting <span class="keyword">for</span> SmartConfig.</span><br><span class="line">...............................................</span><br><span class="line">SmartConfig received.</span><br><span class="line">Waiting <span class="keyword">for</span> WiFi</span><br><span class="line"></span><br><span class="line">WiFi connected: Ohyes</span><br><span class="line">IP address: <span class="number">192.168</span><span class="number">.3</span><span class="number">.94</span></span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Connection WIFI</span><br><span class="line">.........</span><br><span class="line">WiFi connected: Ohyes</span><br><span class="line">IP address: <span class="number">192.168</span><span class="number">.3</span><span class="number">.94</span></span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><h1 id="附录：完整代码"><a href="#附录：完整代码" class="headerlink" title="附录：完整代码"></a>附录：完整代码</h1><p>完整代码可在GitHub下载：<a href="https://github.com/canhetingsky/ESP32_DEV/tree/master/ESP32_SmartConfig">canhetingsky&#x2F;ESP32_DEV&#x2F;ESP32_SmartConfig</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_RETRY 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">smart_config</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Init WiFi as Station, start SmartConfig</span></span><br><span class="line">    WiFi.<span class="built_in">mode</span>(WIFI_AP_STA);</span><br><span class="line">    WiFi.<span class="built_in">beginSmartConfig</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for SmartConfig packet from mobile</span></span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Waiting for SmartConfig.&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (!WiFi.<span class="built_in">smartConfigDone</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;SmartConfig received.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for WiFi to connect to AP</span></span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Waiting for WiFi&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (WiFi.<span class="built_in">status</span>() != WL_CONNECTED)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WiFi.<span class="built_in">setAutoConnect</span>(<span class="literal">true</span>); <span class="comment">// 设置自动连接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">connect_wifi</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WiFi.<span class="built_in">mode</span>(WIFI_STA);</span><br><span class="line">    WiFi.<span class="built_in">begin</span>(); <span class="comment">//启动WIFI连接</span></span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Connection WIFI&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> retry_count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (retry_count &lt; MAX_RETRY)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        retry_count++;</span><br><span class="line">        <span class="keyword">if</span> (WiFi.<span class="built_in">status</span>() == WL_CONNECTED) <span class="comment">//检查连接状态</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup_wifi</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">connect_wifi</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">smart_config</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;WiFi connected: &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(WiFi.<span class="built_in">SSID</span>());</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;IP address: &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(WiFi.<span class="built_in">localIP</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line">    Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">    <span class="built_in">setup_wifi</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
            <tag> SmartConfig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言柔性数组</title>
      <link href="/posts/5c4a1bb8/"/>
      <url>/posts/5c4a1bb8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>结构中最后一个元素允许是未知大小的数组，这个数组就是<code>柔性数组</code>。</p></blockquote><p>结构中的柔性数组前面必须至少一个其他成员，柔性数组成员允许结构中包含一个大小可变的数组，<code>sizeof</code>返回的这种结构大小不包括柔性数组的内存。包含柔数组成员的结构用<code>malloc</code>函数进行内存的动态分配，且分配的内存应该大于结构的大小以适应柔性数组的预期大小。柔性数组到底如何使用？</p><h2 id="不完整类型"><a href="#不完整类型" class="headerlink" title="不完整类型"></a>不完整类型</h2><p>C和C++对于不完整类型的定义是一样的，不完整类型是这样一种类型，它缺乏足够的信息（例如长度）去描述一个完整的对象。</p><p>不完整类型举例：</p><p>前向声明就是一种常用的不完整类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test</span>;</span> <span class="comment">//test 只给出了声明，没有给出定义</span></span><br></pre></td></tr></table></figure><p>不完整数据类型必须通过某种方式补充完整，才能使它们进行实例化，否则只能用于定义指针或引用，因为此时实例化的是指针或引用本身，不是base和test对象</p><p>一个未知长度的数组也属于不完整类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a[];</span><br></pre></td></tr></table></figure><p>extern关键字不能去掉，因为数组的长度未知，不能作为定义出现。不完整类型的数组需要补充完整才能使用。不完整类型的数组可以通过几种方式补充完整，大括号形式的初始化就是其中的一种方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>首先，我们需要知道，所谓变量，其实是内存地址的一个抽像名字罢了。在静态编译的程序中，所有的变量名都会在编译时被转成内存地址。机器是不知道我们取的名字的，只知道地址。</p><p>所以就有了<strong>栈内存区</strong>、<strong>堆内存区</strong>、<strong>静态内存区</strong>、<strong>常量内存区</strong>，我们代码中的所有变量都会被编译器预先放到这些内存区中。</p><p>有了上面这个基础，我们来看一下结构体中的成员的地址是什么？我们先简单化一下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> *p;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，test结构中i和p指针，在C的编译器中保存的是相对地址，也就是说，它们的地址是相对于<code>struct test</code>的实例的。如果我们有这样的代码：<br>下面做个实验：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">test</span> <span class="title">t</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;(t.i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;(t.p));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info modern"><p>格式控制符<code>%p</code>中的p是pointer（指针）的缩写。<code>printf</code>函数中<code>%p</code>是打印地址（指针地址）的，是十六进制的形式，但是会全部打完，即有多少位打印多少位，附加前缀0x。</p></div><p>运行结果:</p><p><img src="https://media.canheting.cn/img/202209142354670.png"></p><p>我们可以看到，<code>t.i</code>的地址和<code>t</code>的地址是一样的，<code>t.p</code>的址址相对于t的地址多了个8。说白了，<code>t.i</code>其实就是<code>(&amp;t + 1*0)</code>,<code>t.p</code>的其实就是<code>(&amp;t + 1*8)</code>。<code>1*0</code>和<code>1*8</code>这个偏移地址就是成员<code>i</code>和<code>p</code>在编译时就被编译器给hard code了的地址。于是，你就知道，不管结构体的实例是什么——访问其成员其实就是加成员的偏移量。</p><p>下面再来做个实验：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">short</span> c;</span><br><span class="line">    <span class="type">char</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">test</span> *<span class="title">pt</span>=</span><span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;(pt-&gt;i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;(pt-&gt;c));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;(pt-&gt;p));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="https://media.canheting.cn/img/202209142354827.png"></p><p>注意：上面的<code>pt-&gt;p</code>的偏移之所以是<code>0*8</code>而不是<code>0*6</code>，是因为内存对齐了（我在64位系统上）。关于内存对齐，可参看《C语言内存对齐详解》一文。</p><h2 id="柔性数组"><a href="#柔性数组" class="headerlink" title="柔性数组"></a>柔性数组</h2><p>柔性数组成员（flexible array member）也叫伸缩性数组成员，这种代码结构产生于对动态结构体的需求。在日常的编程中，有时候需要在结构体中存放一个长度动态的字符串，一般的做法，是在结构体中定义一个指针成员，这个指针成员指向该字符串所在的动态内存空间，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s_test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">double</span> b;</span><br><span class="line">    <span class="type">char</span>* p;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>p指向字符串，这种方法造成字符串与结构体是分离的，不利于操作。把字符串和结构体连在一起的话，效果会更好，可以修改如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s_test</span> *<span class="title">ptest</span> =</span> (<span class="keyword">struct</span> s_test*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(s_test)+streln(a)+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(ptest+<span class="number">1</span>,a);</span><br></pre></td></tr></table></figure><p>这样一来，<code>(char*)(ptestt + 1)</code>就是字符串“hello world”的地址。这时候p成了多余的东西，可以去掉。但是，又产生了另外一个问题：老是使用<code>(char*)(ptestt + 1)</code>不方便。如果能够找出一种方法，既能直接引用该字符串，又不占用结构体的空间，就完美了，符合这种条件的代码结构应该是一个非对象的符号地址，在结构体的尾部放置一个0长度的数组是一个绝妙的解决方案。不过，C&#x2F;C++标准规定不能定义长度为0的数组，因此，有些编译器就把0长度的数组成员作为自己的非标准扩展，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s_test2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">double</span> b;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>c就叫柔性数组成员，如果把ptest指向的动态分配内存看作一个整体，c就是一个长度可以动态变化的结构体成员，柔性一词来源于此。c的长度为0，因此它不占用test的空间，同时<code>ptest-&gt;c</code>就是“hello world”的首地址，不需要再使用<code>(char*)(ptestt + 1)</code>这么丑陋的语法了。</p><p>鉴于这种代码结构所产生的重要作用，C99 甚至把它收入了标准中：</p><blockquote><p>As a special case, the last element of a structure with more than one named member may have an incomplete array type; this is called a flexible array member.</p></blockquote><p>C99使用不完整类型实现柔性数组成员，标准形式是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s_test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">  <span class="type">double</span> b;</span><br><span class="line">  <span class="type">char</span> c[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>c同样不占用test的空间，只作为一个符号地址存在，而且必须是结构体的最后一个成员。柔性数组成员不仅可以用于字符数组，还可以是元素为其它类型的数组，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s_test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">double</span> b;</span><br><span class="line">    <span class="type">float</span>[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先，我们要知道，0长度的数组在ISO C 和C++的规格说明书中是不允许的。这也就是为什么在VC++2012下编译你会得到一个警告：“arning C4200: 使用了非标准扩展:结构&#x2F;联合中的零大小数组”。</p><p>那么为什么gcc可以通过而连一个警告都没有？那是因为gcc为了预先支持C99的这种玩法，所以，让<code>零长度数组</code>这种玩法合法了。关于GCC对于这个事的文档在这里：“Arrays of Length Zero”，文档中给了一个例子，完整代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span> &#123;</span></span><br><span class="line">   <span class="type">int</span> length;</span><br><span class="line">   <span class="type">char</span> contents[<span class="number">0</span>]; <span class="comment">// C99的玩法是：char contents[]; 没有指定数组长度</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> this_length=<span class="number">10</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">line</span> *<span class="title">thisline</span> =</span> (<span class="keyword">struct</span> line *)</span><br><span class="line">                     <span class="built_in">malloc</span> (<span class="keyword">sizeof</span> (<span class="keyword">struct</span> line) + this_length);</span><br><span class="line">    thisline-&gt;length = this_length;</span><br><span class="line">    <span class="built_in">memset</span>(thisline-&gt;contents, <span class="string">&#x27;a&#x27;</span>, this_length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码的意思是：我想分配一个不定长的数组，于是我有一个结构体，其中有两个成员，一个是length，代表数组的长度，一个是contents，代码数组的内容。后面代码里的this_length（长度是10）代表是想分配的数据的长度。</p><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">char</span>* content;</span><br><span class="line">&#125;line;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">line2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">&#125;line2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">line3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">char</span> content[<span class="number">0</span>];</span><br><span class="line">&#125;line3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">line4</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">char</span> content[];</span><br><span class="line">&#125;line4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">test1</span><span class="params">(<span class="type">char</span>* v,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    line* p_str = (line*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(line) + n);</span><br><span class="line">    p_str-&gt;len = n;</span><br><span class="line"></span><br><span class="line">    p_str-&gt;content = <span class="built_in">memcpy</span>((<span class="type">char</span>*)(p_str + <span class="number">1</span>), v, n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret = %s\n&quot;</span>, v);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test1 str=%s\n&quot;</span>, p_str-&gt;content);</span><br><span class="line">    <span class="built_in">free</span>(p_str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">test2</span><span class="params">(<span class="type">char</span>* v,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    line2* p_str = (line2*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(line2) + n);</span><br><span class="line">    p_str-&gt;len = n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">char</span>*)(p_str + <span class="number">1</span>), v, n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret = %s\n&quot;</span>, v);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test2 str=%s\n&quot;</span>, (<span class="type">char</span>*)(p_str+<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">free</span>(p_str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">test3</span><span class="params">(<span class="type">char</span>* v,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    line3* p_str = (line3*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(line3) + n);</span><br><span class="line">    p_str-&gt;len = n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">char</span>*)(p_str + <span class="number">1</span>), v, n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret = %s\n&quot;</span>, v);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test3 str=%s\n&quot;</span>, p_str-&gt;content);</span><br><span class="line">    <span class="built_in">free</span>(p_str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">test4</span><span class="params">(<span class="type">char</span>* v,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    line4* p_str = (line4*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(line4) + n);</span><br><span class="line">    p_str-&gt;len = n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">char</span>*)(p_str + <span class="number">1</span>), v, n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret = %s\n&quot;</span>, v);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test4 str=%s\n&quot;</span>, p_str-&gt;content);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p_str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> v[<span class="number">16</span>] = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    test1(v,<span class="number">16</span>);</span><br><span class="line">    test2(v,<span class="number">16</span>);</span><br><span class="line">    test3(v,<span class="number">16</span>);</span><br><span class="line">    test4(v,<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用柔性数组的好处"><a href="#使用柔性数组的好处" class="headerlink" title="使用柔性数组的好处"></a>使用柔性数组的好处</h3><p>在进行Linux内核开发或者嵌入式开发时，经常会遇到结构体的最后出现char data[], char data[0], char data[1]，这样的代码，这就是柔性数组的实现。柔性数组也并没有定义柔性数组，只是所支持的不完整类型产生了柔性数组这样神奇的结构。</p><ul><li>不需要初始化，数组名直接就是所在的偏移</li><li>不占任何空间，指针需要占用int长度空间，空数组不占任何空间。（注意，char data[1]；这种形式是占用一个单位的空间的）</li><li>空间一次分配，防止内存泄漏</li><li>分配连续的内存，减少内存碎片化。（因为指针所分配的空间不是连续的，而数组占用连续的空间）</li></ul><h3 id="使用柔性数组需要注意的"><a href="#使用柔性数组需要注意的" class="headerlink" title="使用柔性数组需要注意的"></a>使用柔性数组需要注意的</h3><ul><li>必须是结构体的最后一个成员</li><li>柔性数组之上，需要有其他的成员（结构体中不能只有一个柔性数组）</li><li>sizefo返回的结构体的大小不包括柔性数组的内存（如果是char data[1]就会有一个单位的空间）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub上一个高star的嵌入式C编码规范</title>
      <link href="/posts/ee876dcb/"/>
      <url>/posts/ee876dcb/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>在逛GitHub时，发现一篇嵌入式C编码规范，写的比较详细。在学习的同时，给翻译了下加深学习。</p></div><p><img src="https://media.canheting.cn//img/202209041612057.png" alt="image-20220904161239766"></p><blockquote><p>本文翻译自：<a href="https://github.com/MaJerle/c-code-style">Recommended C style and coding rules</a></p></blockquote><div class="tabs" id="c-code-style"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="c-code-style-1">中文</button><button type="button" class="tab " data-href="c-code-style-2">英文</button></ul><div class="tab-contents"><div class="tab-item-content active" id="c-code-style-1"><h1 id="推荐的-C-风格和编码规则"><a href="#推荐的-C-风格和编码规则" class="headerlink" title="推荐的 C 风格和编码规则"></a>推荐的 C 风格和编码规则</h1><p>本文描述了 Tilen MAJERLE 在他的项目和库中使用的 C 代码风格。</p><h2 id="最重要的一条规则"><a href="#最重要的一条规则" class="headerlink" title="最重要的一条规则"></a>最重要的一条规则</h2><p>让我们从 <a href="https://developer.gnome.org/programming-guidelines/stable/c-coding-style.html.en">GNOME developer</a> 站点的引用开始。</p><blockquote><p>编写代码时最重要的一条规则是：<em>检查周围的代码并尝试模仿它</em>。</p><p>作为一个维护者，如果收到一个明显与周围代码风格不同的补丁，这是是令人沮丧的。这是不尊重人的，就像有人穿着泥泞的鞋子走进一间一尘不染的房子一样。</p><p>因此，无论本文档推荐什么，如果已经编写了代码，并且你正在修补它，请保持它当前的样式一致，即使它不是你最喜欢的样式。</p></blockquote><h2 id="一般规则"><a href="#一般规则" class="headerlink" title="一般规则"></a>一般规则</h2><p>这里列出了最明显和最重要的一般规则。在你继续阅读其他章节之前，请仔细检查它们。</p><ul><li>使用 <code>C99</code> 标准</li><li>不使用制表符，使用空格代替</li><li>每个缩进级别使用 <code>4</code> 空格</li><li>在关键字和左括号之间使用 <code>1</code> 空格</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line"><span class="keyword">while</span> (condition)</span><br><span class="line"><span class="keyword">for</span> (init; condition; step)</span><br><span class="line"><span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (condition)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">if</span>(condition)</span><br><span class="line"><span class="keyword">while</span>(condition)</span><br><span class="line"><span class="keyword">for</span>(init;condition;step)</span><br><span class="line"><span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span>(condition)</span><br></pre></td></tr></table></figure><ul><li>在函数名和左括号之间不要使用空格</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32_t</span> a = sum(<span class="number">4</span>, <span class="number">3</span>);              <span class="comment">/* OK */</span></span><br><span class="line"><span class="type">int32_t</span> a = sum (<span class="number">4</span>, <span class="number">3</span>);             <span class="comment">/* Wrong */</span></span><br></pre></td></tr></table></figure><ul><li>不要为变量&#x2F;函数&#x2F;宏&#x2F;类型使用 <code>__</code> 或 <code>_</code> 前缀。这是为 C 语言本身保留的<ul><li>对于严格的模块私有函数，首选 <code>prv_</code> 名称前缀</li></ul></li><li>对于包含下划线 <code>_</code> char 的变量&#x2F;函数&#x2F;宏&#x2F;类型，只能使用小写字母</li><li>左花括号总是与关键字在同一行 ( <code>for</code>，<code>while</code>，<code>do</code>，<code>switch</code>，<code>if</code>，…)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;           <span class="comment">/* OK */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)&#123;            <span class="comment">/* Wrong */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)             <span class="comment">/* Wrong */</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在比较操作符和赋值操作符前后使用单个空格</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32_t</span> a;</span><br><span class="line">a = <span class="number">3</span> + <span class="number">4</span>;              <span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; <span class="number">5</span>; ++a) <span class="comment">/* OK */</span></span><br><span class="line">a=<span class="number">3</span>+<span class="number">4</span>;                  <span class="comment">/* Wrong */</span></span><br><span class="line">a = <span class="number">3</span>+<span class="number">4</span>;                <span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">for</span> (a=<span class="number">0</span>;a&lt;<span class="number">5</span>;++a)       <span class="comment">/* Wrong */</span></span><br></pre></td></tr></table></figure><ul><li>在每个逗号后使用一个空格</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func_name(<span class="number">5</span>, <span class="number">4</span>);        <span class="comment">/* OK */</span></span><br><span class="line">func_name(<span class="number">4</span>,<span class="number">3</span>);         <span class="comment">/* Wrong */</span></span><br></pre></td></tr></table></figure><ul><li>不要初始化 <code>static</code> 和 <code>global</code> 变量到 <code>0</code> (或 <code>NULL</code>)，让编译器为你做</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int32_t</span> a;       <span class="comment">/* OK */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int32_t</span> b = <span class="number">4</span>;   <span class="comment">/* OK */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int32_t</span> a = <span class="number">0</span>;   <span class="comment">/* Wrong */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int32_t</span>* ptr;<span class="comment">/* OK */</span></span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> abc = <span class="number">0</span>;<span class="comment">/* Wrong */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在同一行声明相同类型的所有局部变量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">char</span> a;             <span class="comment">/* OK */</span></span><br><span class="line">    <span class="type">char</span> b;             <span class="comment">/* Wrong, variable with char type already exists */</span></span><br><span class="line">    <span class="type">char</span> a, b;          <span class="comment">/* OK */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>按顺序声明局部变量<ol><li>自定义结构和枚举</li><li>整型，更宽的无符号类型优先</li><li>单&#x2F;双浮点</li></ol></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">/* 1 */</span></span><br><span class="line">    <span class="type">my_struct_t</span> my;     <span class="comment">/* First custom structures */</span></span><br><span class="line">    <span class="type">my_struct_ptr_t</span>* p; <span class="comment">/* Pointers too */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2 */</span></span><br><span class="line">    <span class="type">uint32_t</span> a;</span><br><span class="line">    <span class="type">int32_t</span> b;</span><br><span class="line">    <span class="type">uint16_t</span> c;</span><br><span class="line">    <span class="type">int16_t</span> g;</span><br><span class="line">    <span class="type">char</span> h;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3 */</span></span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>总是在块的开头，在第一个可执行语句之前声明局部变量</p></li><li><p>在 <code>for</code> 循环中声明计数器变量</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* OK, if you need counter variable later */</span></span><br><span class="line"><span class="type">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (...) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">10</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) ...</span><br></pre></td></tr></table></figure><ul><li>避免在声明中使用函数调用对变量赋值，除了单个变量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">a</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">/* Avoid function calls when declaring variable */</span></span><br><span class="line">    <span class="type">int32_t</span> a, b = sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Use this */</span></span><br><span class="line">    <span class="type">int32_t</span> a, b;</span><br><span class="line">    b = sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This is ok */</span></span><br><span class="line">    <span class="type">uint8_t</span> a = <span class="number">3</span>, b = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>除了 <code>char</code>，<code>float</code> 或 <code>double</code>，总是使用在 <code>stdint.h</code> 库中声明的类型，例如。<code>uint8_t</code> 表示<code>unsigned 8-bit</code>等。</li><li>不要使用 <code>stdbool.h</code> 库。分别使用 <code>1</code> 或者 <code>0</code> 表示 <code>真</code> or <code>假</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">uint8_t</span> status;</span><br><span class="line">status = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="type">bool</span> status = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><ul><li>不要与 <code>true</code> 比较，例如。<code>if (check_func() == 1)</code>，使用 <code>if (check_func()) {...}</code></li><li>总是与 <code>NULL</code> 值比较指针</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* ptr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* OK, compare against NULL */</span></span><br><span class="line"><span class="keyword">if</span> (ptr == <span class="literal">NULL</span> || ptr != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">if</span> (ptr || !ptr) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>总是使用 <em>前增量 (和递减)</em> 而不是 <em>后增量 (和递减)</em></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32_t</span> a = <span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">a++;            <span class="comment">/* Wrong */</span></span><br><span class="line">++a;            <span class="comment">/* OK */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j) &#123;&#125;  <span class="comment">/* OK */</span></span><br></pre></td></tr></table></figure><ul><li>长度或大小变量总是使用 <code>size_t</code></li><li>如果函数不应该修改 <code>指针</code> 指向的内存，则始终使用 <code>const</code> 作为指针</li><li>如果不应该修改函数参数或变量，请始终使用 <code>const</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* When d could be modified, data pointed to by d could not be modified */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* d)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* When d and data pointed to by d both could not be modified */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* <span class="type">const</span> d)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Not required, it is advised */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* When d should not be modified inside function, only data pointed to by d could be modified */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">void</span>* <span class="type">const</span> d)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当函数可以接受任何类型的指针时，始终使用 <code>void *</code>，不要使用 <code>uint8_t *</code><ul><li>函数在实现时必须注意正确的类型转换</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * To send data, function should not modify memory pointed to by `data` variable</span></span><br><span class="line"><span class="comment"> * thus `const` keyword is important</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * To send generic data (or to write them to file)</span></span><br><span class="line"><span class="comment"> * any type may be passed for data,</span></span><br><span class="line"><span class="comment"> * thus use `void *`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* OK example */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">send_data</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* data, <span class="type">size_t</span> len)</span> &#123; <span class="comment">/* OK */</span></span><br><span class="line">    <span class="comment">/* Do not cast `void *` or `const void *` */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span>* d = data;<span class="comment">/* Function handles proper type for internal usage */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"> <span class="title function_">send_data</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* data, <span class="type">int</span> len)</span> &#123;    <span class="comment">/* Wrong, not not use int */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>始终使用括号与 <code>sizeof</code> 操作符</li><li>不要使用 <em>变长数组</em> (VLA)。使用动态内存分配代替标准的 C <code>malloc</code> 和 <code>free</code> 函数，或者如果库&#x2F;项目提供自定义内存分配，使用它的实现<ul><li>看看 <a href="https://github.com/MaJerle/lwmem">LwMEM</a>，自定义内存管理库</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span>* arr;</span><br><span class="line">    arr = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*arr) * n); <span class="comment">/* OK, Allocate memory */</span></span><br><span class="line">    arr = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> *arr * n);  <span class="comment">/* Wrong, brackets for sizeof operator are missing */</span></span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* FAIL, no memory */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(arr);  <span class="comment">/* Free memory after usage */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span> arr[size];  <span class="comment">/* Wrong, do not use VLA */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>始终将变量与 0 比较，除非它被处理为 <code>布尔</code> 类型</li><li>不要将 <code>布尔处理的</code> 变量与 0 或 1 进行比较。使用 NOT ( <code>!</code>) 代替</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> length = <span class="number">5</span>;  <span class="comment">/* Counter variable */</span></span><br><span class="line"><span class="type">uint8_t</span> is_ok = <span class="number">0</span>;  <span class="comment">/* Boolean-treated variable */</span></span><br><span class="line"><span class="keyword">if</span> (length)         <span class="comment">/* Wrong, length is not treated as boolean */</span></span><br><span class="line"><span class="keyword">if</span> (length &gt; <span class="number">0</span>)     <span class="comment">/* OK, length is treated as counter variable containing multi values, not only 0 or 1 */</span></span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">0</span>)    <span class="comment">/* OK, length is treated as counter variable containing multi values, not only 0 or 1 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_ok)          <span class="comment">/* OK, variable is treated as boolean */</span></span><br><span class="line"><span class="keyword">if</span> (!is_ok)         <span class="comment">/* OK, -||- */</span></span><br><span class="line"><span class="keyword">if</span> (is_ok == <span class="number">1</span>)     <span class="comment">/* Wrong, never compare boolean variable against 1! */</span></span><br><span class="line"><span class="keyword">if</span> (is_ok == <span class="number">0</span>)     <span class="comment">/* Wrong, use ! for negative check */</span></span><br></pre></td></tr></table></figure><ul><li>注释总是使用 <code>/* comment */</code>，即使是 <em>单行</em> 注释</li><li>总是在头文件中包含带 <code>extern</code> 关键字的 <code>C++</code> 检查</li><li>每个函数必须包含 <em>doxygen-enabled</em> 注释，即使函数是 <code>static</code></li><li>函数、变量、注释使用英文名称&#x2F;文本</li><li>变量使用 <em>小写</em> 字母</li><li>如果变量包含多个名称，使用 <em>下划线</em>。 例如，使用 <code>force_redraw</code>，不要使用 <code>forceRedraw</code></li><li>永远不要强制转换返回 <code>void *</code> 的函数，例如，<code>uint8_t* ptr = (uint8_t *)func_returning_void_ptr();</code> 作为 <code>void *</code> 被安全提升为任何其他指针类型<ul><li>使用 <code>uint8_t* ptr = func_returning_void_ptr();</code> 来代替</li></ul></li><li>对于 C 标准库包含的文件，通常使用 <code>&lt;</code> 和 <code>&gt;</code>，例如， <code>#include &lt;stdlib.h&gt;</code></li><li>对于自定义库，总是使用 <code>&quot;&quot;</code>，例如， <code>#include &quot;my_library.h&quot;</code></li><li>当转换为指针类型时，总是将星号对齐到类型，例如，<code>uint8_t* t = (uint8_t*)var_width_diff_type</code></li><li>始终尊重项目或库中已经使用的代码风格</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>不允许以 <code>//</code> 开头的注释。始终使用 <code>/* comment */</code>，即使是单行注释</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//This is comment (wrong)</span></span><br><span class="line"><span class="comment">/* This is comment (ok) */</span></span><br></pre></td></tr></table></figure><ul><li>对于多行注释，每行使用 <code>空格+星号</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This is multi-line comments,</span></span><br><span class="line"><span class="comment"> * written in 2 lines (ok)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wrong, use double-asterisk only for doxygen documentation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Single line comment without space before asterisk (wrong)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Single line comment in multi-line configuration (wrong)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Single line comment (ok) */</span></span><br></pre></td></tr></table></figure><ul><li>注释时使用 <code>12</code> 个缩进 ( <code>12 * 4</code> 空格) 偏移量。如果语句大于 <code>12</code> 缩进，将注释 <code>4-空格</code> 对齐 (下面的例子) 到下一个可用的缩进</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">char</span> a, b;</span><br><span class="line"></span><br><span class="line">    a = call_func_returning_char_a(a);          <span class="comment">/* This is comment with 12*4 spaces indent from beginning of line */</span></span><br><span class="line">    b = call_func_returning_char_a_but_func_name_is_very_long(a);   <span class="comment">/* This is comment, aligned to 4-spaces indent */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>每个可以从其模块外部访问的函数必须包含 函数<em>原型</em>(或 <em>声明</em>)</li><li>函数名必须是小写的，可以用下划线分隔 <code>_</code> 字符</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">myfunc</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYFunc</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">myFunc</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><ul><li>当函数返回指针时，将星号对齐到返回类型</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">my_struct_t</span>* <span class="title function_">my_func</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">my_struct_t</span> * <span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li>对齐所有函数原型 (具有相同&#x2F;相似的功能) 以获得更好的可读性</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK, function names aligned */</span></span><br><span class="line"><span class="type">void</span>        <span class="title function_">set</span><span class="params">(<span class="type">int32_t</span> a)</span>;</span><br><span class="line"><span class="type">my_type_t</span>   <span class="title function_">get</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">my_ptr_t</span>*   <span class="title function_">get_ptr</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int32_t</span> a)</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * <span class="title function_">get</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li>函数实现必须在单独的行中包含返回类型和可选的其他关键字</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">int32_t</span> </span><br><span class="line"><span class="title function_">foo</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* </span><br><span class="line"><span class="title function_">get_string</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello world!\r\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">foo</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>使变量名全部小写，可选下划线 <code>_</code> 字符</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">int32_t</span> a;</span><br><span class="line"><span class="type">int32_t</span> my_var;</span><br><span class="line"><span class="type">int32_t</span> myvar;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">int32_t</span> A;</span><br><span class="line"><span class="type">int32_t</span> myVar;</span><br><span class="line"><span class="type">int32_t</span> MYVar;</span><br></pre></td></tr></table></figure><ul><li>根据<code>类型</code> 将局部变量分组在一起</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">foo</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span> a, b;   <span class="comment">/* OK */</span></span><br><span class="line">    <span class="type">char</span> a;</span><br><span class="line">    <span class="type">char</span> b;         <span class="comment">/* Wrong, char type already exists */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不要在第一个可执行语句后声明变量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">foo</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span> a;</span><br><span class="line">    a = bar();</span><br><span class="line">    <span class="type">int32_t</span> b;      <span class="comment">/* Wrong, there is already executable statement */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>你可以在下一个缩进层声明新的变量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32_t</span> a, b;</span><br><span class="line">a = foo();</span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="type">int32_t</span> c, d;   <span class="comment">/* OK, c and d are in if-statement scope */</span></span><br><span class="line">    c = foo();</span><br><span class="line">    <span class="type">int32_t</span> e;      <span class="comment">/* Wrong, there was already executable statement inside block */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用星号声明指针变量与类型对齐</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">char</span>* a;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">char</span> *a;</span><br><span class="line"><span class="type">char</span> * a;</span><br></pre></td></tr></table></figure><ul><li>当声明多个指针变量时，可以用星号对变量名进行声明</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">char</span> *p, *n;</span><br></pre></td></tr></table></figure><h2 id="结构、枚举类型定义"><a href="#结构、枚举类型定义" class="headerlink" title="结构、枚举类型定义"></a>结构、枚举类型定义</h2><ul><li>结构或枚举名称必须是小写的，单词之间可用下划线 <code>_</code> </li><li>结构或枚举可能包含 <code>typedef</code> 关键字</li><li>所有结构成员必须是小写的</li><li>所有枚举成员必须为大写</li><li>结构&#x2F;枚举必须遵循 doxygen 文档语法</li></ul><p>当声明结构体时，它可以使用以下 <code>3</code> 不同的选项之一：</p><ol><li>当结构体只用<em>name</em> 声明时，名称后绝对不能包含 <code>_t</code> 后缀。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">struct_name</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* a;</span><br><span class="line">    <span class="type">char</span> b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>当结构只使用 <em>typedef</em> 声明时，名称后必须包含 <code>_t</code> 后缀。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* a;</span><br><span class="line">    <span class="type">char</span> b;</span><br><span class="line">&#125; <span class="type">struct_name_t</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>当结构体使用 <em>name 和 typedef</em> 声明时，它不能包含 <code>_t</code> 作为基本名称，必须在它的名称后面包含<code>_t</code>后缀作为typedef部分</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">struct_name</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* a;</span><br><span class="line">    <span class="type">char</span> b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">&#125; <span class="type">struct_name_t</span>;</span><br></pre></td></tr></table></figure><p>错误声明的例子及建议的纠正</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* a and b must be separated to 2 lines */</span></span><br><span class="line"><span class="comment">/* Name of structure with typedef must include _t suffix */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int32_t</span> a, b;</span><br><span class="line">&#125; a;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Corrected version */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int32_t</span> a;</span><br><span class="line">    <span class="type">int32_t</span> b;</span><br><span class="line">&#125; <span class="type">a_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong name, it must not include _t suffix */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">name_t</span> &#123;</span></span><br><span class="line">    <span class="type">int32_t</span> a;</span><br><span class="line">    <span class="type">int32_t</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong parameters, must be all uppercase */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    MY_ENUM_TESTA,</span><br><span class="line">    my_enum_testb,</span><br><span class="line">&#125; <span class="type">my_enum_t</span>;</span><br></pre></td></tr></table></figure><ul><li>当在声明中初始化结构时，使用 <code>C99</code> 初始化样式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">a_t</span> a = &#123;</span><br><span class="line">    .a = <span class="number">4</span>,</span><br><span class="line">    .b = <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">a_t</span> a = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>当为函数句柄引入新的 typedef 时，使用 <code>_fn</code> 后缀</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Function accepts 2 parameters and returns uint8_t */</span></span><br><span class="line"><span class="comment">/* Name of typedef has `_fn` suffix */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">uint8_t</span> <span class="params">(*my_func_typedef_fn)</span><span class="params">(<span class="type">uint8_t</span> p1, <span class="type">const</span> <span class="type">char</span>* p2)</span>;</span><br></pre></td></tr></table></figure><h2 id="复合语句"><a href="#复合语句" class="headerlink" title="复合语句"></a>复合语句</h2><ul><li>每个复合语句必须包含左花括号和右花括号，即使它只包含 <code>1</code> 个嵌套语句</li><li>每个复合语句必须包含单个缩进；当嵌套语句时，为每个嵌套包含 <code>1</code> 个缩进大小</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">if</span> (c) &#123;</span><br><span class="line">    do_a();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    do_b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">if</span> (c)</span><br><span class="line">    do_a();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    do_b();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">if</span> (c) do_a();</span><br><span class="line"><span class="keyword">else</span> do_b();</span><br></pre></td></tr></table></figure><ul><li>对于 <code>if</code> 或 <code>if-else-if</code> 语句，<code>else</code> 必须与第一个语句的右括号在同一行</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于 <code>do-while</code> 语句，<code>while</code> 部分必须与 <code>do</code> 部分的右括号在同一行</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span> a;</span><br><span class="line">    a = do_a();</span><br><span class="line">    do_b(a);</span><br><span class="line">&#125; <span class="keyword">while</span> (check());</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">&#125; <span class="keyword">while</span> (check());</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (check());</span><br></pre></td></tr></table></figure><ul><li>每一个开括号都要缩进</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">    do_a();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    do_b();</span><br><span class="line">    <span class="keyword">if</span> (c) &#123;</span><br><span class="line">        do_c();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不要做没有花括号的复合语句，即使是单个语句。下面的例子展示了一些不好的做法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a) do_b();</span><br><span class="line"><span class="keyword">else</span> do_c();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a) do_a(); <span class="keyword">else</span> do_b();</span><br></pre></td></tr></table></figure><ul><li>空 <code>while</code>，<code>do-while</code> 或 <code>for</code> 循环必须包含括号</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">while</span> (is_register_bit_set()) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">while</span> (is_register_bit_set());</span><br><span class="line"><span class="keyword">while</span> (is_register_bit_set()) &#123; &#125;</span><br><span class="line"><span class="keyword">while</span> (is_register_bit_set()) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果 <code>while</code> (或 <code>for</code>，<code>do-while</code>，等等) 为空 (嵌入式编程中也有这种情况)，使用空的单行括号</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Wait for bit to be set in embedded hardware unit</span></span><br><span class="line"><span class="comment">uint32_t* addr = HW_PERIPH_REGISTER_ADDR;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/* Wait bit 13 to be ready */</span></span><br><span class="line"><span class="keyword">while</span> (*addr &amp; (<span class="number">1</span> &lt;&lt; <span class="number">13</span>)) &#123;&#125;        <span class="comment">/* OK, empty loop contains no spaces inside curly brackets */</span></span><br><span class="line"><span class="keyword">while</span> (*addr &amp; (<span class="number">1</span> &lt;&lt; <span class="number">13</span>)) &#123; &#125;       <span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">while</span> (*addr &amp; (<span class="number">1</span> &lt;&lt; <span class="number">13</span>)) &#123;         <span class="comment">/* Wrong */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (*addr &amp; (<span class="number">1</span> &lt;&lt; <span class="number">13</span>));          <span class="comment">/* Wrong, curly brackets are missing. Can lead to compiler warnings or unintentional bugs */</span></span><br></pre></td></tr></table></figure><ul><li>总是倾向于这样顺序使用循环： <code>for</code>，<code>do-while</code>，<code>while</code></li><li>尽量避免在循环块内递增变量，参见示例</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Not recommended */</span></span><br><span class="line"><span class="type">int32_t</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (a &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    .</span><br><span class="line">    ..</span><br><span class="line">    ...</span><br><span class="line">    ++a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Better */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> a = <span class="number">0</span>; a &lt; <span class="number">10</span>; ++a) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Better, if inc may not happen in every cycle */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> a = <span class="number">0</span>; a &lt; <span class="number">10</span>; ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (...) &#123;</span><br><span class="line">        ++a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><ul><li>为每个 <code>case</code> 语句添加 <em>单个缩进</em></li><li>对于 <code>case</code> 或 <code>default</code> 中的 <code>break</code> 语句，使用附加的 <em>单个缩进</em></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK, every case has single indent */</span></span><br><span class="line"><span class="comment">/* OK, every break has additional indent */</span></span><br><span class="line"><span class="keyword">switch</span> (check()) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        do_a();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        do_b();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong, case indent missing */</span></span><br><span class="line"><span class="keyword">switch</span> (check()) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    do_a();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    do_b();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">switch</span> (check()) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        do_a();</span><br><span class="line">    <span class="keyword">break</span>;      <span class="comment">/* Wrong, break must have indent as it is under case */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    do_b();     <span class="comment">/* Wrong, indent under case is missing */</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>总是包含 <code>default</code> 语句</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">switch</span> (var) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        do_job();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong, default is missing */</span></span><br><span class="line"><span class="keyword">switch</span> (var) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        do_job();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果需要局部变量，使用大括号并将 <code>break</code> 语句放入其中。<ul><li>把左大括号放在与 <code>case</code> 语句同一行</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (a) &#123;</span><br><span class="line">    <span class="comment">/* OK */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">        <span class="type">int32_t</span> a, b;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        a = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wrong */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int32_t</span> a;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wrong, break shall be inside */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">        <span class="type">int32_t</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="宏和预处理指令"><a href="#宏和预处理指令" class="headerlink" title="宏和预处理指令"></a>宏和预处理指令</h2><ul><li>总是使用宏而不是文字常量，特别是对于数字</li><li>所有宏必须完全大写，可选下划线 <code>_</code> 字符，除非它们被明确地标记为函数，将来可能会被常规函数语法替换</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_MACRO(x)         ((x) * (x))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> square(x)           ((x) * (x))</span></span><br></pre></td></tr></table></figure><ul><li>总是用圆括号保护输入参数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(x, y)           ((x) &lt; (y) ? (x) : (y))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(x, y)           x &lt; y ? x : y</span></span><br></pre></td></tr></table></figure><ul><li>总是用括号来保护最终的宏计算</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(x, y)           (x) &lt; (y) ? (x) : (y)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUM(x, y)           (x) + (y)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Imagine result of this equation using wrong SUM implementation */</span></span><br><span class="line"><span class="type">int32_t</span> x = <span class="number">5</span> * SUM(<span class="number">3</span>, <span class="number">4</span>);  <span class="comment">/* Expected result is 5 * 7 = 35 */</span></span><br><span class="line"><span class="type">int32_t</span> x = <span class="number">5</span> * (<span class="number">3</span>) + (<span class="number">4</span>);  <span class="comment">/* It is evaluated to this, final result = 19 which is not what we expect */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Correct implementation */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(x, y)           ((x) &lt; (y) ? (x) : (y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUM(x, y)           ((x) + (y))</span></span><br></pre></td></tr></table></figure><ul><li>当宏使用多个语句时，使用 <code>do-while (0)</code> 语句保护它</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int32_t</span> px, py;</span><br><span class="line">&#125; <span class="type">point_t</span>;</span><br><span class="line"><span class="type">point_t</span> p;                  <span class="comment">/* Define new point */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong implementation */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define macro to set point */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET_POINT(p, x, y)  (p)-&gt;px = (x); (p)-&gt;py = (y)    <span class="comment">/* 2 statements. Last one should not implement semicolon */</span></span></span><br><span class="line"></span><br><span class="line">SET_POINT(&amp;p, <span class="number">3</span>, <span class="number">4</span>);        <span class="comment">/* Set point to position 3, 4. This evaluates to... */</span></span><br><span class="line">(&amp;p)-&gt;px = (<span class="number">3</span>); (&amp;p)-&gt;py = (<span class="number">4</span>); <span class="comment">/* ... to this. In this example this is not a problem. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Consider this ugly code, however it is valid by C standard (not recommended) */</span></span><br><span class="line"><span class="keyword">if</span> (a)                      <span class="comment">/* If a is true */</span></span><br><span class="line">    <span class="keyword">if</span> (b)                  <span class="comment">/* If b is true */</span></span><br><span class="line">        SET_POINT(&amp;p, <span class="number">3</span>, <span class="number">4</span>);<span class="comment">/* Set point to x = 3, y = 4 */</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        SET_POINT(&amp;p, <span class="number">5</span>, <span class="number">6</span>);<span class="comment">/* Set point to x = 5, y = 6 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Evaluates to code below. Do you see the problem? */</span></span><br><span class="line"><span class="keyword">if</span> (a)</span><br><span class="line">    <span class="keyword">if</span> (b)</span><br><span class="line">        (&amp;p)-&gt;px = (<span class="number">3</span>); (&amp;p)-&gt;py = (<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        (&amp;p)-&gt;px = (<span class="number">5</span>); (&amp;p)-&gt;py = (<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Or if we rewrite it a little */</span></span><br><span class="line"><span class="keyword">if</span> (a)</span><br><span class="line">    <span class="keyword">if</span> (b)</span><br><span class="line">        (&amp;p)-&gt;px = (<span class="number">3</span>);</span><br><span class="line">        (&amp;p)-&gt;py = (<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        (&amp;p)-&gt;px = (<span class="number">5</span>);</span><br><span class="line">        (&amp;p)-&gt;py = (<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ask yourself a question: To which `if` statement `else` keyword belongs?</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Based on first part of code, answer is straight-forward. To inner `if` statement when we check `b` condition</span></span><br><span class="line"><span class="comment"> * Actual answer: Compilation error as `else` belongs nowhere</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Better and correct implementation of macro */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET_POINT(p, x, y)  do &#123; (p)-&gt;px = (x); (p)-&gt;py = (y); &#125; while (0)    <span class="comment">/* 2 statements. No semicolon after while loop */</span></span></span><br><span class="line"><span class="comment">/* Or even better */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET_POINT(p, x, y)  do &#123;    \   <span class="comment">/* Backslash indicates statement continues in new line */</span></span></span><br><span class="line">    (p)-&gt;px = (x);                  \</span><br><span class="line">    (p)-&gt;py = (y);                  \</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)                             <span class="comment">/* 2 statements. No semicolon after while loop */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Now original code evaluates to */</span></span><br><span class="line"><span class="keyword">if</span> (a)</span><br><span class="line">    <span class="keyword">if</span> (b)</span><br><span class="line">        <span class="keyword">do</span> &#123; (&amp;p)-&gt;px = (<span class="number">3</span>); (&amp;p)-&gt;py = (<span class="number">4</span>); &#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">do</span> &#123; (&amp;p)-&gt;px = (<span class="number">5</span>); (&amp;p)-&gt;py = (<span class="number">6</span>); &#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Every part of `if` or `else` contains only `1` inner statement (do-while), hence this is valid evaluation */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* To make code perfect, use brackets for every if-ifelse-else statements */</span></span><br><span class="line"><span class="keyword">if</span> (a) &#123;                    <span class="comment">/* If a is true */</span></span><br><span class="line">    <span class="keyword">if</span> (b) &#123;                <span class="comment">/* If b is true */</span></span><br><span class="line">        SET_POINT(&amp;p, <span class="number">3</span>, <span class="number">4</span>);<span class="comment">/* Set point to x = 3, y = 4 */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        SET_POINT(&amp;p, <span class="number">5</span>, <span class="number">6</span>);<span class="comment">/* Set point to x = 5, y = 6 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>避免使用 <code>#ifdef</code> 或 <code>#ifndef</code>。使用 <code>defined()</code> 或 <code>!defined()</code> 来代替</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> XYZ</span></span><br><span class="line"><span class="comment">/* do something */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* XYZ */</span></span></span><br></pre></td></tr></table></figure><ul><li>总是记录 <code>if/elif/else/endif</code> 语句</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(XYZ)</span></span><br><span class="line"><span class="comment">/* Do if XYZ defined */</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/* defined(XYZ) */</span></span></span><br><span class="line"><span class="comment">/* Do if XYZ not defined */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* !defined(XYZ) */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(XYZ)</span></span><br><span class="line"><span class="comment">/* Do if XYZ defined */</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">/* Do if XYZ not defined */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>不缩进子语句里面 <code>#if</code> 语句</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(XYZ)</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(ABC)</span></span><br><span class="line"><span class="comment">/* do when ABC defined */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* defined(ABC) */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/* defined(XYZ) */</span></span></span><br><span class="line"><span class="comment">/* Do when XYZ not defined */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* !defined(XYZ) */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(XYZ)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> defined(ABC)</span></span><br><span class="line">        <span class="comment">/* do when ABC defined */</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span> <span class="comment">/* defined(ABC) */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/* defined(XYZ) */</span></span></span><br><span class="line">    <span class="comment">/* Do when XYZ not defined */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* !defined(XYZ) */</span></span></span><br></pre></td></tr></table></figure><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>文档化的代码允许 doxygen 解析和通用 html&#x2F;pdf&#x2F;latex 输出，因此正确地做这件事是非常重要的。</p><ul><li>对于 <code>变量</code>，<code>函数</code> 和 <code>结构体/枚举</code>，使用doxygen支持的文档样式</li><li>doxygen总是使用 <code>\</code>，不要使用 <code>@</code></li><li>对于文本，始终使用 <code>5x4</code> 空格 ( <code>5</code> 个制表符) 从行首偏移</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           Holds pointer to first entry in linked list</span></span><br><span class="line"><span class="comment"> *                  Beginning of this text is 5 tabs (20 spaces) from beginning of line</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span></span><br><span class="line"><span class="type">type_t</span>* <span class="built_in">list</span>;</span><br></pre></td></tr></table></figure><ul><li>每个结构&#x2F;枚举成员都必须包含文档</li><li>注释的开头使用 <code>12x4 空格</code> 偏移量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           This is point struct</span></span><br><span class="line"><span class="comment"> * \note            This structure is used to calculate all point</span></span><br><span class="line"><span class="comment"> *                      related stuff</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int32_t</span> x;                                  <span class="comment">/*!&lt; Point X coordinate */</span></span><br><span class="line">    <span class="type">int32_t</span> y;                                  <span class="comment">/*!&lt; Point Y coordinate */</span></span><br><span class="line">    <span class="type">int32_t</span> size;                               <span class="comment">/*!&lt; Point size.</span></span><br><span class="line"><span class="comment">                                                    Since comment is very big,</span></span><br><span class="line"><span class="comment">                                                    you may go to next line */</span></span><br><span class="line">&#125; <span class="type">point_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           Point color enumeration</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    COLOR_RED,                                  <span class="comment">/*!&lt; Red color. This comment has 12x4</span></span><br><span class="line"><span class="comment">                                                    spaces offset from beginning of line */</span></span><br><span class="line">    COLOR_GREEN,                                <span class="comment">/*!&lt; Green color */</span></span><br><span class="line">    COLOR_BLUE,                                 <span class="comment">/*!&lt; Blue color */</span></span><br><span class="line">&#125; <span class="type">point_color_t</span>;</span><br></pre></td></tr></table></figure><ul><li>函数的文档必须在函数实现中编写 (通常是源文件)</li><li>函数必须包含 <code>简介</code> 和所有参数文档</li><li>必须注意每个参数是否分别用于<code>输入</code>和<code>输出</code></li><li>如果函数返回值，则必须包含 <code>return</code> 参数。这不适用于 <code>void</code> 函数</li><li>函数可以包含其他 doxygen 关键字，如 <code>note</code> 或 <code>warning</code></li><li>在参数名和描述之间使用冒号 <code>:</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           Sum `2` numbers</span></span><br><span class="line"><span class="comment"> * \param[in]       a: First number</span></span><br><span class="line"><span class="comment"> * \param[in]       b: Second number</span></span><br><span class="line"><span class="comment"> * \return          Sum of input values</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int32_t</span></span><br><span class="line"><span class="title function_">sum</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           Sum `2` numbers and write it to pointer</span></span><br><span class="line"><span class="comment"> * \note            This function does not return value, it stores it to pointer instead</span></span><br><span class="line"><span class="comment"> * \param[in]       a: First number</span></span><br><span class="line"><span class="comment"> * \param[in]       b: Second number</span></span><br><span class="line"><span class="comment"> * \param[out]      result: Output variable used to save result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">void_sum</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b, <span class="type">int32_t</span>* result)</span> &#123;</span><br><span class="line">    *result = a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果函数返回枚举成员，使用 <code>ref</code> 关键字指定哪一个成员</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           My enumeration</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    MY_ERR,                                     <span class="comment">/*!&lt; Error value */</span></span><br><span class="line">    MY_OK                                       <span class="comment">/*!&lt; OK value */</span></span><br><span class="line">&#125; <span class="type">my_enum_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           Check some value</span></span><br><span class="line"><span class="comment"> * \return          \ref MY_OK on success, member of \ref my_enum_t otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">my_enum_t</span></span><br><span class="line"><span class="title function_">check_value</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> MY_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对常数或数字使用符号 (\ <code>NULL\</code> &#x3D;&gt; <code>NULL</code>)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           Get data from input array</span></span><br><span class="line"><span class="comment"> * \param[in]       in: Input data</span></span><br><span class="line"><span class="comment"> * \return          Pointer to output data on success, `NULL` otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">const</span> <span class="type">void</span> *</span><br><span class="line"><span class="title function_">get_data</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* in)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>宏的文档必须包括 <code>hideinitializer</code> doxygen 命令</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           Get minimal value between `x` and `y`</span></span><br><span class="line"><span class="comment"> * \param[in]       x: First value</span></span><br><span class="line"><span class="comment"> * \param[in]       y: Second value</span></span><br><span class="line"><span class="comment"> * \return          Minimal value between `x` and `y`</span></span><br><span class="line"><span class="comment"> * \hideinitializer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(x, y)       ((x) &lt; (y) ? (x) : (y))</span></span><br></pre></td></tr></table></figure><h2 id="头-源文件"><a href="#头-源文件" class="headerlink" title="头&#x2F;源文件"></a>头&#x2F;源文件</h2><ul><li>在文件末尾留下一个空行</li><li>每个文件都必须包括文件的doxygen注释和后跟空行的简要描述(使用doxygen时)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \file            template.h</span></span><br><span class="line"><span class="comment"> * \brief           Template include file</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">                    <span class="comment">/* Here is empty line */</span></span><br></pre></td></tr></table></figure><ul><li>每个文件 (<em>头文件</em> 或 <em>源文件</em>) 必须包含许可证 (开头注释包含一个星号，因为doxygen必须忽略它)</li><li>使用与项目&#x2F;库已经使用的相同的许可证</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \file            template.h</span></span><br><span class="line"><span class="comment"> * \brief           Template include file</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) year FirstName LASTNAME</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Permission is hereby granted, free of charge, to any person</span></span><br><span class="line"><span class="comment"> * obtaining a copy of this software and associated documentation</span></span><br><span class="line"><span class="comment"> * files (the &quot;Software&quot;), to deal in the Software without restriction,</span></span><br><span class="line"><span class="comment"> * including without limitation the rights to use, copy, modify, merge,</span></span><br><span class="line"><span class="comment"> * publish, distribute, sublicense, and/or sell copies of the Software,</span></span><br><span class="line"><span class="comment"> * and to permit persons to whom the Software is furnished to do so,</span></span><br><span class="line"><span class="comment"> * subject to the following conditions:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The above copyright notice and this permission notice shall be</span></span><br><span class="line"><span class="comment"> * included in all copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></span><br><span class="line"><span class="comment"> * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES</span></span><br><span class="line"><span class="comment"> * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE</span></span><br><span class="line"><span class="comment"> * AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT</span></span><br><span class="line"><span class="comment"> * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,</span></span><br><span class="line"><span class="comment"> * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING</span></span><br><span class="line"><span class="comment"> * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></span><br><span class="line"><span class="comment"> * OTHER DEALINGS IN THE SOFTWARE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This file is part of library_name.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author:          FirstName LASTNAME &lt;optional_email@example.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>头文件必须包含保护符 <code>#ifndef</code></li><li>头文件必须包含 <code>C++</code> 检查</li><li>在 <code>C++</code> 检查之外包含外部头文件</li><li>包括外部头文件，首先是 STL C 文件，然后是应用程序自定义文件</li><li>为了正确编译，头文件必须只包含其他所有头文件，但不能包含更多 (.c 应在需要时包含其他头文件)</li><li>头文件必须只公开模块公共变量&#x2F;类型&#x2F;函数</li><li>在头文件中使用 <code>extern</code> 作为全局模块变量，稍后在源文件中定义它们</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* file.h ... */</span><br><span class="line">#ifndef ...</span><br><span class="line"></span><br><span class="line">extern int32_t my_variable; /* This is global variable declaration in header */</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">/* file.c ... */</span><br><span class="line">int32_t my_variable;        /* Actually defined in source */</span><br></pre></td></tr></table></figure><ul><li><p>不要将 <code>.c</code> 文件包含在另一个 <code>.c</code> 文件中</p></li><li><p><code>.c</code> 文件应该首先包含对应的 <code>.h</code> 文件，之后包含其他文件，除非另有明确需要</p></li><li><p>在头文件中不包括模块私有声明</p></li><li><p>头文件示例 (示例中没有许可证)</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* License comes here */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TEMPLATE_HDR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEMPLATE_HDR_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Include headers */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __cplusplus */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* File content here */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __cplusplus */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* TEMPLATE_HDR_H */</span></span></span><br></pre></td></tr></table></figure><h2 id="Artistic-style配置"><a href="#Artistic-style配置" class="headerlink" title="Artistic style配置"></a>Artistic style配置</h2><p><a href="http://astyle.sourceforge.net/">AStyle</a> 是一个很棒的软件，它可以帮助根据输入配置格式化代码。</p><p>此存储库包含 <code>astyle-code-format.cfg</code> 文件，可与 <code>AStyle</code> 软件一起使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">astyle --options=&quot;astyle-code-format.cfg&quot; &quot;input_path/*.c,*.h&quot; &quot;input_path2/*.c,*.h&quot;</span><br></pre></td></tr></table></figure><h2 id="Eclipse-格式化"><a href="#Eclipse-格式化" class="headerlink" title="Eclipse 格式化"></a>Eclipse 格式化</h2><p>存储库包含 <code>eclipse-ext-kr-format.xml</code> 文件，可以与基于 eclipse 的工具链一起使用，以设置格式化器选项。</p><p>它基于 K&amp;R 格式器，并根据上述规则进行了修改。你可以在 eclipse 设置中导入它，<code>Preferences -&gt; LANGUAGE -&gt; Code Style -&gt; Formatter</code> 选项卡。</p></div><div class="tab-item-content" id="c-code-style-2"><p>This document describes C code style used by Tilen MAJERLE in his projects and libraries.</p><h2 id="The-single-most-important-rule"><a href="#The-single-most-important-rule" class="headerlink" title="The single most important rule"></a>The single most important rule</h2><p>Let’s start with the quote from <a href="https://developer.gnome.org/programming-guidelines/stable/c-coding-style.html.en">GNOME developer</a> site.</p><blockquote><p>The single most important rule when writing code is this: <em>check the surrounding code and try to imitate it</em>.</p><p>As a maintainer it is dismaying to receive a patch that is obviously in a different coding style to the surrounding code. This is disrespectful, like someone tromping into a spotlessly-clean house with muddy shoes.</p><p>So, whatever this document recommends, if there is already written code and you are patching it, keep its current style consistent even if it is not your favorite style.</p></blockquote><h2 id="General-rules"><a href="#General-rules" class="headerlink" title="General rules"></a>General rules</h2><p>Here are listed most obvious and important general rules. Please check them carefully before you continue with other chapters.</p><ul><li>Use <code>C99</code> standard</li><li>Do not use tabs, use spaces instead</li><li>Use <code>4</code> spaces per indent level</li><li>Use <code>1</code> space between keyword and opening bracket</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line"><span class="keyword">while</span> (condition)</span><br><span class="line"><span class="keyword">for</span> (init; condition; step)</span><br><span class="line"><span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (condition)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">if</span>(condition)</span><br><span class="line"><span class="keyword">while</span>(condition)</span><br><span class="line"><span class="keyword">for</span>(init;condition;step)</span><br><span class="line"><span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span>(condition)</span><br></pre></td></tr></table></figure><ul><li>Do not use space between function name and opening bracket</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32_t</span> a = sum(<span class="number">4</span>, <span class="number">3</span>);              <span class="comment">/* OK */</span></span><br><span class="line"><span class="type">int32_t</span> a = sum (<span class="number">4</span>, <span class="number">3</span>);             <span class="comment">/* Wrong */</span></span><br></pre></td></tr></table></figure><ul><li>Never use <code>__</code> or <code>_</code> prefix for variables&#x2F;functions&#x2F;macros&#x2F;types. This is reserved for C language itself<ul><li>Prefer <code>prv_</code> name prefix for strictly module-private functions</li></ul></li><li>Use only lowercase characters for variables&#x2F;functions&#x2F;macros&#x2F;types with optional underscore <code>_</code> char</li><li>Opening curly bracket is always at the same line as keyword (<code>for</code>, <code>while</code>, <code>do</code>, <code>switch</code>, <code>if</code>, …)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;           <span class="comment">/* OK */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)&#123;            <span class="comment">/* Wrong */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)             <span class="comment">/* Wrong */</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Use single space before and after comparison and assignment operators</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32_t</span> a;</span><br><span class="line">a = <span class="number">3</span> + <span class="number">4</span>;              <span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; <span class="number">5</span>; ++a) <span class="comment">/* OK */</span></span><br><span class="line">a=<span class="number">3</span>+<span class="number">4</span>;                  <span class="comment">/* Wrong */</span></span><br><span class="line">a = <span class="number">3</span>+<span class="number">4</span>;                <span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">for</span> (a=<span class="number">0</span>;a&lt;<span class="number">5</span>;++a)       <span class="comment">/* Wrong */</span></span><br></pre></td></tr></table></figure><ul><li>Use single space after every comma</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func_name(<span class="number">5</span>, <span class="number">4</span>);        <span class="comment">/* OK */</span></span><br><span class="line">func_name(<span class="number">4</span>,<span class="number">3</span>);         <span class="comment">/* Wrong */</span></span><br></pre></td></tr></table></figure><ul><li>Do not initialize <code>static</code> and <code>global</code> variables to <code>0</code> (or <code>NULL</code>), let compiler do it for you</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int32_t</span> a;       <span class="comment">/* OK */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int32_t</span> b = <span class="number">4</span>;   <span class="comment">/* OK */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int32_t</span> a = <span class="number">0</span>;   <span class="comment">/* Wrong */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int32_t</span>* ptr;<span class="comment">/* OK */</span></span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> abc = <span class="number">0</span>;<span class="comment">/* Wrong */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Declare all local variables of the same type in the same line</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">char</span> a;             <span class="comment">/* OK */</span></span><br><span class="line">    <span class="type">char</span> a, b;          <span class="comment">/* OK */</span></span><br><span class="line">    <span class="type">char</span> b;             <span class="comment">/* Wrong, variable with char type already exists */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Declare local variables in order<ol><li>Custom structures and enumerations</li><li>Integer types, wider unsigned type first</li><li>Single&#x2F;Double floating point</li></ol></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">/* 1 */</span></span><br><span class="line">    <span class="type">my_struct_t</span> my;     <span class="comment">/* First custom structures */</span></span><br><span class="line">    <span class="type">my_struct_ptr_t</span>* p; <span class="comment">/* Pointers too */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2 */</span></span><br><span class="line">    <span class="type">uint32_t</span> a;</span><br><span class="line">    <span class="type">int32_t</span> b;</span><br><span class="line">    <span class="type">uint16_t</span> c;</span><br><span class="line">    <span class="type">int16_t</span> g;</span><br><span class="line">    <span class="type">char</span> h;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3 */</span></span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Always declare local variables at the beginning of the block, before first executable statement</p></li><li><p>Declare counter variables in <code>for</code> loop</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* OK, if you need counter variable later */</span></span><br><span class="line"><span class="type">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (...) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">10</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) ...</span><br></pre></td></tr></table></figure><ul><li>Avoid variable assignment with function call in declaration, except for single variables</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">a</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">/* Avoid function calls when declaring variable */</span></span><br><span class="line">    <span class="type">int32_t</span> a, b = sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Use this */</span></span><br><span class="line">    <span class="type">int32_t</span> a, b;</span><br><span class="line">    b = sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This is ok */</span></span><br><span class="line">    <span class="type">uint8_t</span> a = <span class="number">3</span>, b = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Except <code>char</code>, <code>float</code> or <code>double</code>, always use types declared in <code>stdint.h</code> library, eg. <code>uint8_t</code> for <code>unsigned 8-bit</code>, etc.</li><li>Do not use <code>stdbool.h</code> library. Use <code>1</code> or <code>0</code> for <code>true</code> or <code>false</code> respectively</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">uint8_t</span> status;</span><br><span class="line">status = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="type">bool</span> status = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><ul><li>Never compare against <code>true</code>, eg. <code>if (check_func() == 1)</code>, use <code>if (check_func()) { ... }</code></li><li>Always compare pointers against <code>NULL</code> value</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* ptr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* OK, compare against NULL */</span></span><br><span class="line"><span class="keyword">if</span> (ptr == <span class="literal">NULL</span> || ptr != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">if</span> (ptr || !ptr) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Always use <em>pre-increment (and decrement respectively)</em> instead of <em>post-increment (and decrement respectively)</em></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32_t</span> a = <span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">a++;            <span class="comment">/* Wrong */</span></span><br><span class="line">++a;            <span class="comment">/* OK */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j) &#123;&#125;  <span class="comment">/* OK */</span></span><br></pre></td></tr></table></figure><ul><li>Always use <code>size_t</code> for length or size variables</li><li>Always use <code>const</code> for pointer if function should not modify memory pointed to by <code>pointer</code></li><li>Always use <code>const</code> for function parameter or variable, if it should not be modified</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* When d could be modified, data pointed to by d could not be modified */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* d)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* When d and data pointed to by d both could not be modified */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* <span class="type">const</span> d)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Not required, it is advised */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* When d should not be modified inside function, only data pointed to by d could be modified */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">void</span>* <span class="type">const</span> d)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>When function may accept pointer of any type, always use <code>void *</code>, do not use <code>uint8_t *</code><ul><li>Function must take care of proper casting in implementation</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * To send data, function should not modify memory pointed to by `data` variable</span></span><br><span class="line"><span class="comment"> * thus `const` keyword is important</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * To send generic data (or to write them to file)</span></span><br><span class="line"><span class="comment"> * any type may be passed for data,</span></span><br><span class="line"><span class="comment"> * thus use `void *`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* OK example */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">send_data</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* data, <span class="type">size_t</span> len)</span> &#123; <span class="comment">/* OK */</span></span><br><span class="line">    <span class="comment">/* Do not cast `void *` or `const void *` */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span>* d = data;<span class="comment">/* Function handles proper type for internal usage */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">send_data</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* data, <span class="type">int</span> len)</span> &#123;    <span class="comment">/* Wrong, not not use int */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Always use brackets with <code>sizeof</code> operator</li><li>Never use <em>Variable Length Array</em> (VLA). Use dynamic memory allocation instead with standard C <code>malloc</code> and <code>free</code> functions or if library&#x2F;project provides custom memory allocation, use its implementation<ul><li>Take a look at <a href="https://github.com/MaJerle/lwmem">LwMEM</a>, custom memory management library</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span>* arr;</span><br><span class="line">    arr = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*arr) * n); <span class="comment">/* OK, Allocate memory */</span></span><br><span class="line">    arr = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> *arr * n);  <span class="comment">/* Wrong, brackets for sizeof operator are missing */</span></span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* FAIL, no memory */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(arr);  <span class="comment">/* Free memory after usage */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span> arr[size];  <span class="comment">/* Wrong, do not use VLA */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Always compare variable against zero, except if it is treated as <code>boolean</code> type</li><li>Never compare <code>boolean-treated</code> variables against zero or one. Use NOT (<code>!</code>) instead</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> length = <span class="number">5</span>;  <span class="comment">/* Counter variable */</span></span><br><span class="line"><span class="type">uint8_t</span> is_ok = <span class="number">0</span>;  <span class="comment">/* Boolean-treated variable */</span></span><br><span class="line"><span class="keyword">if</span> (length)         <span class="comment">/* Wrong, length is not treated as boolean */</span></span><br><span class="line"><span class="keyword">if</span> (length &gt; <span class="number">0</span>)     <span class="comment">/* OK, length is treated as counter variable containing multi values, not only 0 or 1 */</span></span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">0</span>)    <span class="comment">/* OK, length is treated as counter variable containing multi values, not only 0 or 1 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_ok)          <span class="comment">/* OK, variable is treated as boolean */</span></span><br><span class="line"><span class="keyword">if</span> (!is_ok)         <span class="comment">/* OK, -||- */</span></span><br><span class="line"><span class="keyword">if</span> (is_ok == <span class="number">1</span>)     <span class="comment">/* Wrong, never compare boolean variable against 1! */</span></span><br><span class="line"><span class="keyword">if</span> (is_ok == <span class="number">0</span>)     <span class="comment">/* Wrong, use ! for negative check */</span></span><br></pre></td></tr></table></figure><ul><li>Always use <code>/* comment */</code> for comments, even for <em>single-line</em> comment</li><li>Always include check for <code>C++</code> with <code>extern</code> keyword in header file</li><li>Every function must include <em>doxygen-enabled</em> comment, even if function is <code>static</code></li><li>Use English names&#x2F;text for functions, variables, comments</li><li>Use <em>lowercase</em> characters for variables</li><li>Use <em>underscore</em> if variable contains multiple names, eg. <code>force_redraw</code>. Do not use <code>forceRedraw</code></li><li>Never cast function returning <code>void *</code>, eg. <code>uint8_t* ptr = (uint8_t *)func_returning_void_ptr();</code> as <code>void *</code> is safely promoted to any other pointer type<ul><li>Use <code>uint8_t* ptr = func_returning_void_ptr();</code> instead</li></ul></li><li>Always use <code>&lt;</code> and <code>&gt;</code> for C Standard Library include files, eg. <code>#include &lt;stdlib.h&gt;</code></li><li>Always use <code>&quot;&quot;</code> for custom libraries, eg. <code>#include &quot;my_library.h&quot;</code></li><li>When casting to pointer type, always align asterisk to type, eg. <code>uint8_t* t = (uint8_t*)var_width_diff_type</code></li><li>Always respect code style already used in project or library</li></ul><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><ul><li>Comments starting with <code>//</code> are not allowed. Always use <code>/* comment */</code>, even for single-line comment</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//This is comment (wrong)</span></span><br><span class="line"><span class="comment">/* This is comment (ok) */</span></span><br></pre></td></tr></table></figure><ul><li>For multi-line comments use <code>space+asterisk</code> for every line</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This is multi-line comments,</span></span><br><span class="line"><span class="comment"> * written in 2 lines (ok)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wrong, use double-asterisk only for doxygen documentation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Single line comment without space before asterisk (wrong)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Single line comment in multi-line configuration (wrong)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Single line comment (ok) */</span></span><br></pre></td></tr></table></figure><ul><li>Use <code>12</code> indents (<code>12 * 4</code> spaces) offset when commenting. If statement is larger than <code>12</code> indents, make comment <code>4-spaces</code> aligned (examples below) to next available indent</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">char</span> a, b;</span><br><span class="line"></span><br><span class="line">    a = call_func_returning_char_a(a);          <span class="comment">/* This is comment with 12*4 spaces indent from beginning of line */</span></span><br><span class="line">    b = call_func_returning_char_a_but_func_name_is_very_long(a);   <span class="comment">/* This is comment, aligned to 4-spaces indent */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><ul><li>Every function which may have access from outside its module, must include function <em>prototype</em> (or <em>declaration</em>)</li><li>Function name must be lowercase, optionally separated with underscore <code>_</code> character</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">myfunc</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYFunc</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">myFunc</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><ul><li>When function returns pointer, align asterisk to return type</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">my_struct_t</span>* <span class="title function_">my_func</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">my_struct_t</span> * <span class="title function_">my_func</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li>Align all function prototypes (with the same&#x2F;similar functionality) for better readability</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK, function names aligned */</span></span><br><span class="line"><span class="type">void</span>        <span class="title function_">set</span><span class="params">(<span class="type">int32_t</span> a)</span>;</span><br><span class="line"><span class="type">my_type_t</span>   <span class="title function_">get</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">my_ptr_t</span>*   <span class="title function_">get_ptr</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int32_t</span> a)</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * <span class="title function_">get</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li>Function implementation must include return type and optional other keywords in separate line</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">int32_t</span></span><br><span class="line"><span class="title function_">foo</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>*</span><br><span class="line"><span class="title function_">get_string</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello world!\r\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">foo</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><ul><li>Make variable name all lowercase with optional underscore <code>_</code> character</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">int32_t</span> a;</span><br><span class="line"><span class="type">int32_t</span> my_var;</span><br><span class="line"><span class="type">int32_t</span> myvar;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">int32_t</span> A;</span><br><span class="line"><span class="type">int32_t</span> myVar;</span><br><span class="line"><span class="type">int32_t</span> MYVar;</span><br></pre></td></tr></table></figure><ul><li>Group local variables together by <code>type</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">foo</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span> a, b;   <span class="comment">/* OK */</span></span><br><span class="line">    <span class="type">char</span> a;</span><br><span class="line">    <span class="type">char</span> b;         <span class="comment">/* Wrong, char type already exists */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Do not declare variable after first executable statement</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">foo</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span> a;</span><br><span class="line">    a = bar();</span><br><span class="line">    <span class="type">int32_t</span> b;      <span class="comment">/* Wrong, there is already executable statement */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>You may declare new variables inside next indent level</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32_t</span> a, b;</span><br><span class="line">a = foo();</span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="type">int32_t</span> c, d;   <span class="comment">/* OK, c and d are in if-statement scope */</span></span><br><span class="line">    c = foo();</span><br><span class="line">    <span class="type">int32_t</span> e;      <span class="comment">/* Wrong, there was already executable statement inside block */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Declare pointer variables with asterisk aligned to type</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">char</span>* a;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">char</span> *a;</span><br><span class="line"><span class="type">char</span> * a;</span><br></pre></td></tr></table></figure><ul><li>When declaring multiple pointer variables, you may declare them with asterisk aligned to variable name</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">char</span> *p, *n;</span><br></pre></td></tr></table></figure><h2 id="Structures-enumerations-typedefs"><a href="#Structures-enumerations-typedefs" class="headerlink" title="Structures, enumerations, typedefs"></a>Structures, enumerations, typedefs</h2><ul><li>Structure or enumeration name must be lowercase with optional underscore <code>_</code> character between words</li><li>Structure or enumeration may contain <code>typedef</code> keyword</li><li>All structure members must be lowercase</li><li>All enumeration members must be uppercase</li><li>Structure&#x2F;enumeration must follow doxygen documentation syntax</li></ul><p>When structure is declared, it may use one of <code>3</code> different options:</p><ol><li>When structure is declared with <em>name only</em>, it <em>must not</em> contain <code>_t</code> suffix after its name.</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">struct_name</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* a;</span><br><span class="line">    <span class="type">char</span> b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>When structure is declared with <em>typedef only</em>, it <em>has to</em> contain <code>_t</code> suffix after its name.</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* a;</span><br><span class="line">    <span class="type">char</span> b;</span><br><span class="line">&#125; <span class="type">struct_name_t</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>When structure is declared with <em>name and typedef</em>, it <em>must not</em> contain <code>_t</code> for basic name and it <em>has to</em> contain <code>_t</code> suffix after its name for typedef part.</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">struct_name</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* a;</span><br><span class="line">    <span class="type">char</span> b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">&#125; <span class="type">struct_name_t</span>;</span><br></pre></td></tr></table></figure><p>Examples of bad declarations and their suggested corrections</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* a and b must be separated to 2 lines */</span></span><br><span class="line"><span class="comment">/* Name of structure with typedef must include _t suffix */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int32_t</span> a, b;</span><br><span class="line">&#125; a;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Corrected version */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int32_t</span> a;</span><br><span class="line">    <span class="type">int32_t</span> b;</span><br><span class="line">&#125; <span class="type">a_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong name, it must not include _t suffix */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">name_t</span> &#123;</span></span><br><span class="line">    <span class="type">int32_t</span> a;</span><br><span class="line">    <span class="type">int32_t</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong parameters, must be all uppercase */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    MY_ENUM_TESTA,</span><br><span class="line">    my_enum_testb,</span><br><span class="line">&#125; <span class="type">my_enum_t</span>;</span><br></pre></td></tr></table></figure><ul><li>When initializing structure on declaration, use <code>C99</code> initialization style</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="type">a_t</span> a = &#123;</span><br><span class="line">    .a = <span class="number">4</span>,</span><br><span class="line">    .b = <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="type">a_t</span> a = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>When new typedef is introduced for function handles, use <code>_fn</code> suffix</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Function accepts 2 parameters and returns uint8_t */</span></span><br><span class="line"><span class="comment">/* Name of typedef has `_fn` suffix */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">uint8_t</span> <span class="params">(*my_func_typedef_fn)</span><span class="params">(<span class="type">uint8_t</span> p1, <span class="type">const</span> <span class="type">char</span>* p2)</span>;</span><br></pre></td></tr></table></figure><h2 id="Compound-statements"><a href="#Compound-statements" class="headerlink" title="Compound statements"></a>Compound statements</h2><ul><li>Every compound statement must include opening and closing curly bracket, even if it includes only <code>1</code> nested statement</li><li>Every compound statement must include single indent; when nesting statements, include <code>1</code> indent size for each nest</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">if</span> (c) &#123;</span><br><span class="line">    do_a();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    do_b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">if</span> (c)</span><br><span class="line">    do_a();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    do_b();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">if</span> (c) do_a();</span><br><span class="line"><span class="keyword">else</span> do_b();</span><br></pre></td></tr></table></figure><ul><li>In case of <code>if</code> or <code>if-else-if</code> statement, <code>else</code> must be in the same line as closing bracket of first statement</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>In case of <code>do-while</code> statement, <code>while</code> part must be in the same line as closing bracket of <code>do</code> part</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span> a;</span><br><span class="line">    a = do_a();</span><br><span class="line">    do_b(a);</span><br><span class="line">&#125; <span class="keyword">while</span> (check());</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">&#125; <span class="keyword">while</span> (check());</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (check());</span><br></pre></td></tr></table></figure><ul><li>Indentation is required for every opening bracket</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">    do_a();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    do_b();</span><br><span class="line">    <span class="keyword">if</span> (c) &#123;</span><br><span class="line">        do_c();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Never do compound statement without curly bracket, even in case of single statement. Examples below show bad practices</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a) do_b();</span><br><span class="line"><span class="keyword">else</span> do_c();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a) do_a(); <span class="keyword">else</span> do_b();</span><br></pre></td></tr></table></figure><ul><li>Empty <code>while</code>, <code>do-while</code> or <code>for</code> loops must include brackets</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">while</span> (is_register_bit_set()) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">while</span> (is_register_bit_set());</span><br><span class="line"><span class="keyword">while</span> (is_register_bit_set()) &#123; &#125;</span><br><span class="line"><span class="keyword">while</span> (is_register_bit_set()) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>If <code>while</code> (or <code>for</code>, <code>do-while</code>, etc) is empty (it can be the case in embedded programming), use empty single-line brackets</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Wait for bit to be set in embedded hardware unit</span></span><br><span class="line"><span class="comment">uint32_t* addr = HW_PERIPH_REGISTER_ADDR;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/* Wait bit 13 to be ready */</span></span><br><span class="line"><span class="keyword">while</span> (*addr &amp; (<span class="number">1</span> &lt;&lt; <span class="number">13</span>)) &#123;&#125;        <span class="comment">/* OK, empty loop contains no spaces inside curly brackets */</span></span><br><span class="line"><span class="keyword">while</span> (*addr &amp; (<span class="number">1</span> &lt;&lt; <span class="number">13</span>)) &#123; &#125;       <span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">while</span> (*addr &amp; (<span class="number">1</span> &lt;&lt; <span class="number">13</span>)) &#123;         <span class="comment">/* Wrong */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (*addr &amp; (<span class="number">1</span> &lt;&lt; <span class="number">13</span>));          <span class="comment">/* Wrong, curly brackets are missing. Can lead to compiler warnings or unintentional bugs */</span></span><br></pre></td></tr></table></figure><ul><li>Always prefer using loops in this order: <code>for</code>, <code>do-while</code>, <code>while</code></li><li>Avoid incrementing variables inside loop block if possible, see examples</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Not recommended */</span></span><br><span class="line"><span class="type">int32_t</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (a &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    .</span><br><span class="line">    ..</span><br><span class="line">    ...</span><br><span class="line">    ++a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Better */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> a = <span class="number">0</span>; a &lt; <span class="number">10</span>; ++a) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Better, if inc may not happen in every cycle */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> a = <span class="number">0</span>; a &lt; <span class="number">10</span>; ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (...) &#123;</span><br><span class="line">        ++a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Switch-statement"><a href="#Switch-statement" class="headerlink" title="Switch statement"></a>Switch statement</h3><ul><li>Add <em>single indent</em> for every <code>case</code> statement</li><li>Use additional <em>single indent</em> for <code>break</code> statement in each <code>case</code> or <code>default</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK, every case has single indent */</span></span><br><span class="line"><span class="comment">/* OK, every break has additional indent */</span></span><br><span class="line"><span class="keyword">switch</span> (check()) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        do_a();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        do_b();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong, case indent missing */</span></span><br><span class="line"><span class="keyword">switch</span> (check()) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    do_a();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    do_b();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="keyword">switch</span> (check()) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        do_a();</span><br><span class="line">    <span class="keyword">break</span>;      <span class="comment">/* Wrong, break must have indent as it is under case */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    do_b();     <span class="comment">/* Wrong, indent under case is missing */</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Always include <code>default</code> statement</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="keyword">switch</span> (var) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        do_job();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong, default is missing */</span></span><br><span class="line"><span class="keyword">switch</span> (var) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        do_job();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>If local variables are required, use curly brackets and put <code>break</code> statement inside.<ul><li>Put opening curly bracket in the same line as <code>case</code> statement</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (a) &#123;</span><br><span class="line">    <span class="comment">/* OK */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">        <span class="type">int32_t</span> a, b;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        a = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wrong */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int32_t</span> a;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wrong, break shall be inside */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">        <span class="type">int32_t</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Macros-and-preprocessor-directives"><a href="#Macros-and-preprocessor-directives" class="headerlink" title="Macros and preprocessor directives"></a>Macros and preprocessor directives</h2><ul><li>Always use macros instead of literal constants, specially for numbers</li><li>All macros must be fully uppercase, with optional underscore <code>_</code> character, except if they are clearly marked as function which may be in the future replaced with regular function syntax</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_MACRO(x)         ((x) * (x))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> square(x)           ((x) * (x))</span></span><br></pre></td></tr></table></figure><ul><li>Always protect input parameters with parentheses</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(x, y)           ((x) &lt; (y) ? (x) : (y))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(x, y)           x &lt; y ? x : y</span></span><br></pre></td></tr></table></figure><ul><li>Always protect final macro evaluation with parenthesis</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(x, y)           (x) &lt; (y) ? (x) : (y)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUM(x, y)           (x) + (y)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Imagine result of this equation using wrong SUM implementation */</span></span><br><span class="line"><span class="type">int32_t</span> x = <span class="number">5</span> * SUM(<span class="number">3</span>, <span class="number">4</span>);  <span class="comment">/* Expected result is 5 * 7 = 35 */</span></span><br><span class="line"><span class="type">int32_t</span> x = <span class="number">5</span> * (<span class="number">3</span>) + (<span class="number">4</span>);  <span class="comment">/* It is evaluated to this, final result = 19 which is not what we expect */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Correct implementation */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(x, y)           ((x) &lt; (y) ? (x) : (y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUM(x, y)           ((x) + (y))</span></span><br></pre></td></tr></table></figure><ul><li>When macro uses multiple statements, protect it using <code>do-while (0)</code> statement</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int32_t</span> px, py;</span><br><span class="line">&#125; <span class="type">point_t</span>;</span><br><span class="line"><span class="type">point_t</span> p;                  <span class="comment">/* Define new point */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong implementation */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define macro to set point */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET_POINT(p, x, y)  (p)-&gt;px = (x); (p)-&gt;py = (y)    <span class="comment">/* 2 statements. Last one should not implement semicolon */</span></span></span><br><span class="line"></span><br><span class="line">SET_POINT(&amp;p, <span class="number">3</span>, <span class="number">4</span>);        <span class="comment">/* Set point to position 3, 4. This evaluates to... */</span></span><br><span class="line">(&amp;p)-&gt;px = (<span class="number">3</span>); (&amp;p)-&gt;py = (<span class="number">4</span>); <span class="comment">/* ... to this. In this example this is not a problem. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Consider this ugly code, however it is valid by C standard (not recommended) */</span></span><br><span class="line"><span class="keyword">if</span> (a)                      <span class="comment">/* If a is true */</span></span><br><span class="line">    <span class="keyword">if</span> (b)                  <span class="comment">/* If b is true */</span></span><br><span class="line">        SET_POINT(&amp;p, <span class="number">3</span>, <span class="number">4</span>);<span class="comment">/* Set point to x = 3, y = 4 */</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        SET_POINT(&amp;p, <span class="number">5</span>, <span class="number">6</span>);<span class="comment">/* Set point to x = 5, y = 6 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Evaluates to code below. Do you see the problem? */</span></span><br><span class="line"><span class="keyword">if</span> (a)</span><br><span class="line">    <span class="keyword">if</span> (b)</span><br><span class="line">        (&amp;p)-&gt;px = (<span class="number">3</span>); (&amp;p)-&gt;py = (<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        (&amp;p)-&gt;px = (<span class="number">5</span>); (&amp;p)-&gt;py = (<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Or if we rewrite it a little */</span></span><br><span class="line"><span class="keyword">if</span> (a)</span><br><span class="line">    <span class="keyword">if</span> (b)</span><br><span class="line">        (&amp;p)-&gt;px = (<span class="number">3</span>);</span><br><span class="line">        (&amp;p)-&gt;py = (<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        (&amp;p)-&gt;px = (<span class="number">5</span>);</span><br><span class="line">        (&amp;p)-&gt;py = (<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ask yourself a question: To which `if` statement `else` keyword belongs?</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Based on first part of code, answer is straight-forward. To inner `if` statement when we check `b` condition</span></span><br><span class="line"><span class="comment"> * Actual answer: Compilation error as `else` belongs nowhere</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Better and correct implementation of macro */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET_POINT(p, x, y)  do &#123; (p)-&gt;px = (x); (p)-&gt;py = (y); &#125; while (0)    <span class="comment">/* 2 statements. No semicolon after while loop */</span></span></span><br><span class="line"><span class="comment">/* Or even better */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET_POINT(p, x, y)  do &#123;    \   <span class="comment">/* Backslash indicates statement continues in new line */</span></span></span><br><span class="line">    (p)-&gt;px = (x);                  \</span><br><span class="line">    (p)-&gt;py = (y);                  \</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)                             <span class="comment">/* 2 statements. No semicolon after while loop */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Now original code evaluates to */</span></span><br><span class="line"><span class="keyword">if</span> (a)</span><br><span class="line">    <span class="keyword">if</span> (b)</span><br><span class="line">        <span class="keyword">do</span> &#123; (&amp;p)-&gt;px = (<span class="number">3</span>); (&amp;p)-&gt;py = (<span class="number">4</span>); &#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">do</span> &#123; (&amp;p)-&gt;px = (<span class="number">5</span>); (&amp;p)-&gt;py = (<span class="number">6</span>); &#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Every part of `if` or `else` contains only `1` inner statement (do-while), hence this is valid evaluation */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* To make code perfect, use brackets for every if-ifelse-else statements */</span></span><br><span class="line"><span class="keyword">if</span> (a) &#123;                    <span class="comment">/* If a is true */</span></span><br><span class="line">    <span class="keyword">if</span> (b) &#123;                <span class="comment">/* If b is true */</span></span><br><span class="line">        SET_POINT(&amp;p, <span class="number">3</span>, <span class="number">4</span>);<span class="comment">/* Set point to x = 3, y = 4 */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        SET_POINT(&amp;p, <span class="number">5</span>, <span class="number">6</span>);<span class="comment">/* Set point to x = 5, y = 6 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Avoid using <code>#ifdef</code> or <code>#ifndef</code>. Use <code>defined()</code> or <code>!defined()</code> instead</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> XYZ</span></span><br><span class="line"><span class="comment">/* do something */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* XYZ */</span></span></span><br></pre></td></tr></table></figure><ul><li>Always document <code>if/elif/else/endif</code> statements</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(XYZ)</span></span><br><span class="line"><span class="comment">/* Do if XYZ defined */</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/* defined(XYZ) */</span></span></span><br><span class="line"><span class="comment">/* Do if XYZ not defined */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* !defined(XYZ) */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(XYZ)</span></span><br><span class="line"><span class="comment">/* Do if XYZ defined */</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">/* Do if XYZ not defined */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>Do not indent sub statements inside <code>#if</code> statement</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OK */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(XYZ)</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(ABC)</span></span><br><span class="line"><span class="comment">/* do when ABC defined */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* defined(ABC) */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/* defined(XYZ) */</span></span></span><br><span class="line"><span class="comment">/* Do when XYZ not defined */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* !defined(XYZ) */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrong */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(XYZ)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> defined(ABC)</span></span><br><span class="line">        <span class="comment">/* do when ABC defined */</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span> <span class="comment">/* defined(ABC) */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/* defined(XYZ) */</span></span></span><br><span class="line">    <span class="comment">/* Do when XYZ not defined */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* !defined(XYZ) */</span></span></span><br></pre></td></tr></table></figure><h2 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h2><p>Documented code allows doxygen to parse and general html&#x2F;pdf&#x2F;latex output, thus it is very important to do it properly.</p><ul><li>Use doxygen-enabled documentation style for <code>variables</code>, <code>functions</code> and <code>structures/enumerations</code></li><li>Always use <code>\</code> for doxygen, do not use <code>@</code></li><li>Always use <code>5x4</code> spaces (<code>5</code> tabs) offset from beginning of line for text</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           Holds pointer to first entry in linked list</span></span><br><span class="line"><span class="comment"> *                  Beginning of this text is 5 tabs (20 spaces) from beginning of line</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span></span><br><span class="line"><span class="type">type_t</span>* <span class="built_in">list</span>;</span><br></pre></td></tr></table></figure><ul><li>Every structure&#x2F;enumeration member must include documentation</li><li>Use <code>12x4 spaces</code> offset for beginning of comment</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           This is point struct</span></span><br><span class="line"><span class="comment"> * \note            This structure is used to calculate all point</span></span><br><span class="line"><span class="comment"> *                      related stuff</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int32_t</span> x;                                  <span class="comment">/*!&lt; Point X coordinate */</span></span><br><span class="line">    <span class="type">int32_t</span> y;                                  <span class="comment">/*!&lt; Point Y coordinate */</span></span><br><span class="line">    <span class="type">int32_t</span> size;                               <span class="comment">/*!&lt; Point size.</span></span><br><span class="line"><span class="comment">                                                    Since comment is very big,</span></span><br><span class="line"><span class="comment">                                                    you may go to next line */</span></span><br><span class="line">&#125; <span class="type">point_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           Point color enumeration</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    COLOR_RED,                                  <span class="comment">/*!&lt; Red color. This comment has 12x4</span></span><br><span class="line"><span class="comment">                                                    spaces offset from beginning of line */</span></span><br><span class="line">    COLOR_GREEN,                                <span class="comment">/*!&lt; Green color */</span></span><br><span class="line">    COLOR_BLUE,                                 <span class="comment">/*!&lt; Blue color */</span></span><br><span class="line">&#125; <span class="type">point_color_t</span>;</span><br></pre></td></tr></table></figure><ul><li>Documentation for functions must be written in function implementation (source file usually)</li><li>Function must include <code>brief</code> and all parameters documentation</li><li>Every parameter must be noted if it is <code>in</code> or <code>out</code> for <em>input</em> and <em>output</em> respectively</li><li>Function must include <code>return</code> parameter if it returns something. This does not apply for <code>void</code> functions</li><li>Function can include other doxygen keywords, such as <code>note</code> or <code>warning</code></li><li>Use colon <code>:</code> between parameter name and its description</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           Sum `2` numbers</span></span><br><span class="line"><span class="comment"> * \param[in]       a: First number</span></span><br><span class="line"><span class="comment"> * \param[in]       b: Second number</span></span><br><span class="line"><span class="comment"> * \return          Sum of input values</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int32_t</span></span><br><span class="line"><span class="title function_">sum</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           Sum `2` numbers and write it to pointer</span></span><br><span class="line"><span class="comment"> * \note            This function does not return value, it stores it to pointer instead</span></span><br><span class="line"><span class="comment"> * \param[in]       a: First number</span></span><br><span class="line"><span class="comment"> * \param[in]       b: Second number</span></span><br><span class="line"><span class="comment"> * \param[out]      result: Output variable used to save result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">void_sum</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b, <span class="type">int32_t</span>* result)</span> &#123;</span><br><span class="line">    *result = a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>If function returns member of enumeration, use <code>ref</code> keyword to specify which one</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           My enumeration</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    MY_ERR,                                     <span class="comment">/*!&lt; Error value */</span></span><br><span class="line">    MY_OK                                       <span class="comment">/*!&lt; OK value */</span></span><br><span class="line">&#125; <span class="type">my_enum_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           Check some value</span></span><br><span class="line"><span class="comment"> * \return          \ref MY_OK on success, member of \ref my_enum_t otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">my_enum_t</span></span><br><span class="line"><span class="title function_">check_value</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> MY_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Use notation (`NULL` &#x3D;&gt; <code>NULL</code>) for constants or numbers</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           Get data from input array</span></span><br><span class="line"><span class="comment"> * \param[in]       in: Input data</span></span><br><span class="line"><span class="comment"> * \return          Pointer to output data on success, `NULL` otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">const</span> <span class="type">void</span> *</span><br><span class="line"><span class="title function_">get_data</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* in)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Documentation for macros must include <code>hideinitializer</code> doxygen command</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \brief           Get minimal value between `x` and `y`</span></span><br><span class="line"><span class="comment"> * \param[in]       x: First value</span></span><br><span class="line"><span class="comment"> * \param[in]       y: Second value</span></span><br><span class="line"><span class="comment"> * \return          Minimal value between `x` and `y`</span></span><br><span class="line"><span class="comment"> * \hideinitializer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(x, y)       ((x) &lt; (y) ? (x) : (y))</span></span><br></pre></td></tr></table></figure><h2 id="Header-source-files"><a href="#Header-source-files" class="headerlink" title="Header&#x2F;source files"></a>Header&#x2F;source files</h2><ul><li>Leave single empty line at the end of file</li><li>Every file must include doxygen annotation for <code>file</code> and <code>brief</code> description followed by empty line (when using doxygen)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \file            template.h</span></span><br><span class="line"><span class="comment"> * \brief           Template include file</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">                    <span class="comment">/* Here is empty line */</span></span><br></pre></td></tr></table></figure><ul><li>Every file (<em>header</em> or <em>source</em>) must include license (opening comment includes single asterisk as this must be ignored by doxygen)</li><li>Use the same license as already used by project&#x2F;library</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \file            template.h</span></span><br><span class="line"><span class="comment"> * \brief           Template include file</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) year FirstName LASTNAME</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Permission is hereby granted, free of charge, to any person</span></span><br><span class="line"><span class="comment"> * obtaining a copy of this software and associated documentation</span></span><br><span class="line"><span class="comment"> * files (the &quot;Software&quot;), to deal in the Software without restriction,</span></span><br><span class="line"><span class="comment"> * including without limitation the rights to use, copy, modify, merge,</span></span><br><span class="line"><span class="comment"> * publish, distribute, sublicense, and/or sell copies of the Software,</span></span><br><span class="line"><span class="comment"> * and to permit persons to whom the Software is furnished to do so,</span></span><br><span class="line"><span class="comment"> * subject to the following conditions:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The above copyright notice and this permission notice shall be</span></span><br><span class="line"><span class="comment"> * included in all copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></span><br><span class="line"><span class="comment"> * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES</span></span><br><span class="line"><span class="comment"> * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE</span></span><br><span class="line"><span class="comment"> * AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT</span></span><br><span class="line"><span class="comment"> * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,</span></span><br><span class="line"><span class="comment"> * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING</span></span><br><span class="line"><span class="comment"> * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></span><br><span class="line"><span class="comment"> * OTHER DEALINGS IN THE SOFTWARE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This file is part of library_name.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Author:          FirstName LASTNAME &lt;optional_email@example.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>Header file must include guard <code>#ifndef</code></li><li>Header file must include <code>C++</code> check</li><li>Include external header files outside <code>C++</code> check</li><li>Include external header files with STL C files first followed by application custom files</li><li>Header file must include only every other header file in order to compile correctly, but not more (.c should include the rest if required)</li><li>Header file must only expose module public variables&#x2F;types&#x2F;functions</li><li>Use <code>extern</code> for global module variables in header file, define them in source file later</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* file.h ... */</span><br><span class="line">#ifndef ...</span><br><span class="line"></span><br><span class="line">extern int32_t my_variable; /* This is global variable declaration in header */</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">/* file.c ... */</span><br><span class="line">int32_t my_variable;        /* Actually defined in source */</span><br></pre></td></tr></table></figure><ul><li><p>Never include <code>.c</code> files in another <code>.c</code> file</p></li><li><p><code>.c</code> file should first include corresponding <code>.h</code> file, later others, unless otherwise explicitly necessary</p></li><li><p>Do not include module private declarations in header file</p></li><li><p>Header file example (no license for sake of an example)</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* License comes here */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TEMPLATE_HDR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEMPLATE_HDR_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Include headers */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __cplusplus */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* File content here */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __cplusplus */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* TEMPLATE_HDR_H */</span></span></span><br></pre></td></tr></table></figure><h2 id="Artistic-style-configuration"><a href="#Artistic-style-configuration" class="headerlink" title="Artistic style configuration"></a>Artistic style configuration</h2><p><a href="http://astyle.sourceforge.net/">AStyle</a> is a great piece of software that can<br>help with formatting the code based on input configuration.</p><p>This repository contains <code>astyle-code-format.cfg</code> file which can be used with <code>AStyle</code> software.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">astyle --options=&quot;astyle-code-format.cfg&quot; &quot;input_path/*.c,*.h&quot; &quot;input_path2/*.c,*.h&quot;</span><br></pre></td></tr></table></figure><h2 id="Eclipse-formatter"><a href="#Eclipse-formatter" class="headerlink" title="Eclipse formatter"></a>Eclipse formatter</h2><p>Repository contains <code>eclipse-ext-kr-format.xml</code> file that can be used with<br>eclipse-based toolchains to set formatter options.</p><p>It is based on K&amp;R formatter with modifications to respect above rules.<br>You can import it within eclipse settings, <code>Preferences -&gt; LANGUAGE -&gt; Code Style -&gt; Formatter</code> tab.</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 编程规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/posts/a1751c09/"/>
      <url>/posts/a1751c09/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯单片机设计与开发</title>
      <link href="/posts/f7c7e1dd/"/>
      <url>/posts/f7c7e1dd/</url>
      
        <content type="html"><![CDATA[<h3 id="蓝桥杯单片机设计与开发实验例程"><a href="#蓝桥杯单片机设计与开发实验例程" class="headerlink" title="蓝桥杯单片机设计与开发实验例程"></a>蓝桥杯单片机设计与开发实验例程</h3><table><thead><tr><th>常用模块</th><th>LED</th><th>按键</th><th>数码管</th><th>DS18B20</th><th>定时器</th></tr></thead><tbody><tr><td>备注</td><td>亮状态控制</td><td>独立按键&#x2F;矩阵按键</td><td>动态显示数据</td><td>根据提供的驱动，编写初始化及读取温度函数即可</td><td>辅助，但必会</td></tr></tbody></table><span id="more"></span><blockquote><p>1.LED闪烁实验</p></blockquote><ul><li>实验效果：LED以0.2S为间隔闪烁</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//延时函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">20</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;<span class="number">248</span>; k++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        P2 = ((P2&amp;<span class="number">0x1f</span>)|<span class="number">0x80</span>);</span><br><span class="line">    P0 = <span class="number">0xff</span>;  <span class="comment">//LED熄灭</span></span><br><span class="line">    P2 &amp;= <span class="number">0x1f</span>;</span><br><span class="line">        delay();</span><br><span class="line">        </span><br><span class="line">        P2 = ((P2&amp;<span class="number">0x1f</span>)|<span class="number">0x80</span>);</span><br><span class="line">    P0 = <span class="number">0x00</span>;  <span class="comment">//LED点亮</span></span><br><span class="line">    P2 &amp;= <span class="number">0x1f</span>;</span><br><span class="line">        delay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.按键控制（独立按键）</p></blockquote><ul><li>实验效果：按下不同的按键，LED有不同的现象</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span>  <span class="comment">//定义51单片机特殊功能寄存器</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 独立按键接口 */</span></span><br><span class="line">sbit S7  = P3^<span class="number">0</span>;</span><br><span class="line">sbit S6  = P3^<span class="number">1</span>;</span><br><span class="line">sbit S5  = P3^<span class="number">2</span>;</span><br><span class="line">sbit S4  = P3^<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;    </span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span>(S7 == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          P2 = ((P2&amp;<span class="number">0x1f</span>)|<span class="number">0x80</span>);</span><br><span class="line">          P0 = <span class="number">0xff</span>;  <span class="comment">//关闭所有LED</span></span><br><span class="line">          P2 &amp;= <span class="number">0x1f</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span>(S6 == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          P2 = ((P2&amp;<span class="number">0x1f</span>)|<span class="number">0x80</span>);</span><br><span class="line">          P0 = <span class="number">0x00</span>;  <span class="comment">//打开所有LED</span></span><br><span class="line">          P2 &amp;= <span class="number">0x1f</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span>(S5 == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          P2 = ((P2&amp;<span class="number">0x1f</span>)|<span class="number">0xa0</span>);</span><br><span class="line">          P0 &amp;= ~(<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>);  <span class="comment">//Close</span></span><br><span class="line">          P2 &amp;= <span class="number">0x1f</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span>(S4 == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          P2 = ((P2&amp;<span class="number">0x1f</span>)|<span class="number">0xa0</span>);</span><br><span class="line">          P0 |= (<span class="number">0x01</span>&lt;&lt;<span class="number">4</span>); <span class="comment">//Open</span></span><br><span class="line">          P2 &amp;= <span class="number">0x1f</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.数码管控装置</p></blockquote><p>实验效果：所有的数码管显示的相同的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span>  <span class="comment">//定义51单片机特殊功能寄存器</span></span></span><br><span class="line">                     </span><br><span class="line">code <span class="type">unsigned</span> <span class="type">char</span> tab[] =&#123;<span class="number">0xc0</span>,<span class="number">0xf9</span>,<span class="number">0xa4</span>,<span class="number">0xb0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xf8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//延时函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">20</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;<span class="number">248</span>; k++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//段码：确定是哪一位数码管亮</span></span><br><span class="line">          P2=(P2&amp;<span class="number">0x1f</span>|<span class="number">0xc0</span>);</span><br><span class="line">            P0=<span class="number">0xff</span>;</span><br><span class="line">            P2=<span class="number">0x1f</span>;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//位码：确定数码管显示的内容</span></span><br><span class="line">            P2=(P2&amp;<span class="number">0x1f</span>|<span class="number">0xe0</span>);</span><br><span class="line">            P0=tab[i];</span><br><span class="line">            P2=<span class="number">0x1f</span>;</span><br><span class="line">            delay();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.定时器的使用</p></blockquote><p>配置定时器0，工作方式是1，并开启中断；</p><ul><li>定时器模式配置</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TMOD |= <span class="number">0x01</span>;  <span class="comment">//配置定时器工作模式</span></span><br><span class="line">TH0 = (<span class="number">65536</span><span class="number">-2000</span>)/<span class="number">256</span>;</span><br><span class="line">TL0 = (<span class="number">65536</span><span class="number">-2000</span>)%<span class="number">256</span>; <span class="comment">//定时器初始值  </span></span><br><span class="line">EA = <span class="number">1</span>; <span class="comment">//开启总中断，只有开启了总中断，其他中断才有效</span></span><br><span class="line">ET0 = <span class="number">1</span>;  <span class="comment">//打开定时器0中断</span></span><br><span class="line">TR0 = <span class="number">1</span>;  <span class="comment">//启动定时器0，即定时器0开始计数</span></span><br></pre></td></tr></table></figure><ul><li>中断服务函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">isr_timer_0</span><span class="params">(<span class="type">void</span>)</span>  interrupt 1  <span class="comment">//默认中断优先级 1</span></span><br><span class="line">&#123;</span><br><span class="line">    TH0 = (<span class="number">65536</span><span class="number">-2000</span>)/<span class="number">256</span>;</span><br><span class="line">    TL0 = (<span class="number">65536</span><span class="number">-2000</span>)%<span class="number">256</span>;  <span class="comment">//定时器重载 </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//put your code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例程之基于定时器的数码管时钟</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***************数码管段码    0    1    2    3    4    5    6    7    8    9   灭   - */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> code tab[] = &#123;<span class="number">0xc0</span>,<span class="number">0xf9</span>,<span class="number">0xa4</span>,<span class="number">0xb0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xf8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>,<span class="number">0xff</span>,<span class="number">0xbf</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> dspbuf[<span class="number">8</span>]= &#123;<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>&#125;;<span class="comment">//数码管显示缓冲区</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> dspcom=<span class="number">0</span>;<span class="comment">//数码管动态刷新时位置</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> flag_2ms=<span class="number">0</span>;<span class="comment">//数码管刷新标志位</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> second=<span class="number">30</span>,minute=<span class="number">15</span>,hour=<span class="number">17</span>;<span class="comment">//初始化时间</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定时器0初始化</span></span><br><span class="line">    TMOD |= <span class="number">0x01</span>;</span><br><span class="line">    TH0 = (<span class="number">65536</span><span class="number">-2000</span>)/<span class="number">256</span>;</span><br><span class="line">    TL0 = (<span class="number">65536</span><span class="number">-2000</span>)/<span class="number">256</span>;</span><br><span class="line">    EA=<span class="number">1</span>;<span class="comment">//开启总中断</span></span><br><span class="line">    ET0=<span class="number">1</span>;<span class="comment">//开启定时器0中断</span></span><br><span class="line">    TR0=<span class="number">1</span>;<span class="comment">//启动定时器0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(flag_2ms == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            display();</span><br><span class="line">            flag_2ms=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新显示数据</span></span><br><span class="line">        dspbuf[<span class="number">0</span>] = hour/<span class="number">10</span>;</span><br><span class="line">        dspbuf[<span class="number">1</span>] = hour%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        dspbuf[<span class="number">2</span>] = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        dspbuf[<span class="number">3</span>] = minute/<span class="number">10</span>;</span><br><span class="line">        dspbuf[<span class="number">4</span>] = minute%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        dspbuf[<span class="number">5</span>] = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        dspbuf[<span class="number">6</span>] = second/<span class="number">10</span>;</span><br><span class="line">        dspbuf[<span class="number">7</span>] = second%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器0中断服务函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer0_int</span><span class="params">()</span> interrupt 1</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//刚开始数码管时间无法更新，保持初始值；</span></span><br><span class="line"><span class="comment">//原因：char最大是255，根本不会达到500，当然不会更新时间了，嘤嘤嘤！</span></span><br><span class="line"><span class="comment">//    static unsigned char counter=0;</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">int</span> counter=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时器重载</span></span><br><span class="line">    TH0=(<span class="number">65536</span><span class="number">-2000</span>)/<span class="number">256</span>;</span><br><span class="line">    TL0=(<span class="number">65536</span><span class="number">-2000</span>)/<span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2ms执行一次</span></span><br><span class="line">    counter++;</span><br><span class="line">    flag_2ms=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(counter==<span class="number">500</span>)<span class="comment">//ls时间</span></span><br><span class="line">    &#123;</span><br><span class="line">        counter=<span class="number">0</span>;</span><br><span class="line">        second++;</span><br><span class="line"><span class="keyword">if</span>(second==<span class="number">60</span>)</span><br><span class="line">&#123;</span><br><span class="line">second=<span class="number">0</span>;</span><br><span class="line">minute++;</span><br><span class="line"><span class="keyword">if</span>(minute==<span class="number">60</span>)</span><br><span class="line">&#123;</span><br><span class="line">minute=<span class="number">0</span>;</span><br><span class="line">hour++;</span><br><span class="line"><span class="keyword">if</span>(hour==<span class="number">24</span>)</span><br><span class="line">&#123;</span><br><span class="line">hour=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数码管动态显示函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">display</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用于消除数码管闪烁</span></span><br><span class="line">    P2=(P2&amp;<span class="number">0x1f</span>|<span class="number">0xe0</span>);</span><br><span class="line">    P0=tab[<span class="number">10</span>];</span><br><span class="line">    P2=<span class="number">0x1f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数码管位码</span></span><br><span class="line">    P2 = (P2 &amp; <span class="number">0x1f</span>) | <span class="number">0xc0</span>;</span><br><span class="line">    P0 = (<span class="number">0x01</span>&lt;&lt;dspcom);</span><br><span class="line">    P2 = P2 &amp; <span class="number">0x1f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数码管段码</span></span><br><span class="line">    P2 = (P2 &amp; <span class="number">0x1f</span>) | <span class="number">0xe0</span>;</span><br><span class="line">    P0 = tab[dspbuf[dspcom]];</span><br><span class="line">    P2 = P2 &amp; <span class="number">0x1f</span>;</span><br><span class="line"></span><br><span class="line">    dspcom++;</span><br><span class="line">    <span class="keyword">if</span>(dspcom == <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dspcom=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用EasyX制作一个颜色画板</title>
      <link href="/posts/f70cd762/"/>
      <url>/posts/f70cd762/</url>
      
        <content type="html"><![CDATA[<p>EasyX 是针对C++的图形库，可以帮助C语言初学者快速上手图形和游戏编程。  </p><p>比如，可以用 VC + EasyX 很快的用几何图形画一个房子，或者一辆移动的小车，可以编写俄罗斯方块、贪吃蛇、黑白棋等小游戏，可以练习图形学的各种算法，等等。总之，这是一个很强大的图形库。  </p><p><strong>通过此库设计了一个颜色画板！</strong></p><blockquote><p>代码如下：  </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ***********************************************************************</span></span><br><span class="line"><span class="comment">// Assembly         :</span></span><br><span class="line"><span class="comment">// Author           : qin</span></span><br><span class="line"><span class="comment">// Created          : 07-18-2016</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Last Modified By : qin</span></span><br><span class="line"><span class="comment">// Last Modified On : 08-14-2016</span></span><br><span class="line"><span class="comment">// ***********************************************************************</span></span><br><span class="line"><span class="comment">// &lt;copyright file=&quot;demo.cpp&quot; company=&quot;&quot;&gt;</span></span><br><span class="line"><span class="comment">//     Copyright (c) . All rights reserved.</span></span><br><span class="line"><span class="comment">// &lt;/copyright&gt;</span></span><br><span class="line"><span class="comment">// &lt;summary&gt;&lt;/summary&gt;</span></span><br><span class="line"><span class="comment">// ***********************************************************************</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">box</span><span class="params">()</span></span>;<span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fill</span><span class="params">()</span></span>;<span class="comment">//函数声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// Mains this instance.</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;int.&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">initgraph</span>(<span class="number">640</span>, <span class="number">480</span>);</span><br><span class="line"><span class="built_in">box</span>();</span><br><span class="line"><span class="built_in">fill</span>();</span><br><span class="line"><span class="built_in">closegraph</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 调用画格子和调色板函数.</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">box</span><span class="params">()</span><span class="comment">//画格子及调色板函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> color[<span class="number">9</span>] = &#123; BLACK, BLUE, GREEN, CYAN, RED, MAGENTA, BROWN, YELLOW, WHITE &#125;;<span class="comment">//调色板拥有的颜色，可以自己增加</span></span><br><span class="line"><span class="built_in">setlinecolor</span>(LIGHTGRAY);<span class="comment">//设置格子边框颜色</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">16</span>; i++)<span class="comment">//画格子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">line</span>(i * <span class="number">30</span> + <span class="number">80</span>, <span class="number">40</span>, i * <span class="number">30</span> + <span class="number">80</span>, <span class="number">280</span>);<span class="comment">//画17条竖线</span></span><br><span class="line"><span class="keyword">if</span> (i &lt;= <span class="number">8</span>)</span><br><span class="line"><span class="built_in">line</span>(<span class="number">80</span>, i * <span class="number">30</span> + <span class="number">40</span>, <span class="number">560</span>, i * <span class="number">30</span> + <span class="number">40</span>);<span class="comment">//画9条横线</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)<span class="comment">//画调色板的格子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">line</span>(i * <span class="number">50</span> + <span class="number">95</span>, <span class="number">350</span>, i * <span class="number">50</span> + <span class="number">95</span>, <span class="number">400</span>);<span class="comment">//画10条竖线</span></span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">line</span>(<span class="number">95</span>, i * <span class="number">50</span> + <span class="number">350</span>, <span class="number">545</span>, i * <span class="number">50</span> + <span class="number">350</span>);<span class="comment">//画2条横线</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)<span class="comment">//填充调色板格子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">setfillcolor</span>(color[i]);<span class="comment">//设置填充颜色</span></span><br><span class="line"><span class="built_in">floodfill</span>(i * <span class="number">50</span> + <span class="number">100</span>, <span class="number">375</span>, LIGHTGRAY);<span class="comment">//填充颜色</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 鼠标控制填色函数.</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;int.&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fill</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MOUSEMSG m;</span><br><span class="line"><span class="type">int</span> whichcolor = BLACK;<span class="comment">//颜色值,默认黑色</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">m = <span class="built_in">GetMouseMsg</span>();</span><br><span class="line"><span class="keyword">if</span> (m.uMsg == WM_LBUTTONDOWN)<span class="comment">//判断左键是否按下</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m.y &gt;= <span class="number">350</span> &amp;&amp; m.y &lt;= <span class="number">400</span> &amp;&amp; m.x &gt;= <span class="number">145</span> &amp;&amp; m.x &lt;=<span class="number">545</span>)<span class="comment">//判断鼠标是否位于调色板区域</span></span><br><span class="line">&#123;</span><br><span class="line">whichcolor = <span class="built_in">getpixel</span>(m.x, m.y);<span class="comment">//返回该点的颜色</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m.y &gt;= <span class="number">40</span> &amp;&amp; m.y &lt;= <span class="number">280</span> &amp;&amp; m.x &gt;= <span class="number">110</span> &amp;&amp; m.x &lt;= <span class="number">560</span>)<span class="comment">//判断鼠标是否位于待填色格子区域</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">setfillcolor</span>(whichcolor);<span class="comment">//设置填充颜色</span></span><br><span class="line"><span class="built_in">floodfill</span>(m.x, m.y, LIGHTGRAY);<span class="comment">//填充颜色</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m.uMsg == WM_RBUTTONDOWN)<span class="comment">//判断是否按下右键</span></span><br><span class="line">&#123;</span><br><span class="line">TCHAR s[] = _T(<span class="string">&quot;即将退出,请稍后......&quot;</span>);</span><br><span class="line"><span class="built_in">settextcolor</span>(LIGHTBLUE);</span><br><span class="line"><span class="built_in">outtextxy</span>(<span class="number">320</span> - <span class="built_in">textwidth</span>(s)/<span class="number">2</span> , <span class="number">315</span> - <span class="built_in">textheight</span>(s)/<span class="number">2</span>, s);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">600</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">outtextxy</span>(j, <span class="number">100</span>, s);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//结束函数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> EasyX </tag>
            
            <tag> 编程 </tag>
            
            <tag> 图形库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine-Admin后台搭建</title>
      <link href="/posts/3c98a028/"/>
      <url>/posts/3c98a028/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/DesertsP/Valine-Admin">Valine Admin</a> 是 Valine 评论系统的扩展和增强，主要实现评论邮件通知、评论管理、垃圾评论过滤等功能。</p></blockquote><span id="more"></span><p><a href="https://github.com/DesertsP/Valine-Admin">Valine Admin</a> 支持完全自定义的邮件通知模板。基于 Akismet API 实现准确的垃圾评论过滤。此外，使用云函数等技术解决了免费版云引擎休眠问题，支持云引擎自动唤醒，漏发邮件自动补发。兼容云淡风轻及Deserts维护的多版本Valine。</p><h2 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h2><ul><li>在 <a href="https://leancloud.cn/dashboard/#/apps">Leancloud</a> 云引擎设置界面，填写代码库并保存：<a href="https://github.com/DesertsP/Valine-Admin.git">https://github.com/DesertsP/Valine-Admin.git</a><br><img src="https://media.canheting.cn/img/1586763962331.jpg" alt="设置仓库"></li><li>在设置页面，设置环境变量以及 Web 二级域名。<br><img src="https://media.canheting.cn/img/1586764335298.jpg" alt="环境变量"></li></ul><table><thead><tr><th>变量</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>SITE_NAME</td><td>Deserts</td><td>[必填]博客名称</td></tr><tr><td>SITE_URL</td><td><a href="https://deserts.io/">https://deserts.io</a></td><td>[必填]首页地址</td></tr><tr><td><strong>SMTP_SERVICE</strong></td><td>QQ</td><td>[新版支持]邮件服务提供商，支持 QQ、163、126、Gmail 以及 <a href="https://nodemailer.com/smtp/well-known/#supported-services">更多</a></td></tr><tr><td>SMTP_USER</td><td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td><td>[必填]SMTP登录用户</td></tr><tr><td>SMTP_PASS</td><td>ccxxxxxxxxch</td><td>[必填]SMTP登录密码（QQ邮箱需要获取独立密码）</td></tr><tr><td>SENDER_NAME</td><td>Deserts</td><td>[必填]发件人</td></tr><tr><td>SENDER_EMAIL</td><td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td><td>[必填]发件邮箱</td></tr><tr><td>ADMIN_URL</td><td><a href="https://xxx.leanapp.cn/">https://xxx.leanapp.cn/</a></td><td>[建议]Web主机-二级域名，用于自动唤醒</td></tr><tr><td>BLOGGER_EMAIL</td><td><a href="mailto:xxxxx@gmail.com">xxxxx@gmail.com</a></td><td>[可选]博主通知收件地址，默认使用SENDER_EMAIL</td></tr><tr><td>AKISMET_KEY</td><td>xxxxxxxxxxxx</td><td>[可选]Akismet Key 用于垃圾评论检测，设为MANUAL_REVIEW开启人工审核，留空不使用反垃圾</td></tr></tbody></table><p><strong>以上必填参数请务必正确设置。</strong></p><ul><li><p>二级域名用于评论后台管理，如<a href="https://deserts.leanapp.cn/">https://deserts.leanapp.cn</a> 。<br><img src="https://media.canheting.cn/img/1586764344136.jpg" alt="二级域名"></p></li><li><p>切换到部署标签页，分支使用master，点击部署即可<br><img src="https://media.canheting.cn/img/1586764501029.jpg" alt="一键部署"></p></li><li><p>第一次部署需要花点时间。<br><img src="https://media.canheting.cn/img/1586764523793.jpg" alt="部署过程"></p></li><li><p>评论管理。访问设置的二级域名<code>https://二级域名.leanapp.cn/sign-up</code>，注册管理员登录信息，如：<a href="https://deserts.leanapp.cn/sign-up">https://deserts.leanapp.cn/sign-up</a><br> <img src="https://media.canheting.cn/img/1586764674233.jpg" alt="管理员注册"></p></li></ul><blockquote><p>注：使用原版Valine如果遇到注册页面不显示直接跳转至登录页的情况，请手动删除_User表中的全部数据。</p></blockquote><p>此后，可以通过<code>https://二级域名.leanapp.cn/</code>管理评论。</p><h2 id="定时任务设置"><a href="#定时任务设置" class="headerlink" title="定时任务设置"></a>定时任务设置</h2><p>目前实现了两种云函数定时任务：</p><ul><li>自动唤醒，定时访问Web APP二级域名防止云引擎休眠；</li><li>每天定时检查24小时内漏发的邮件通知。</li></ul><p>进入云引擎-定时任务中，创建定时器，创建两个定时任务。</p><p>选择self-wake云函数，Cron表达式为<code>0 0/30 7-23 * * ?</code>，表示每天早6点到晚23点每隔30分钟访问云引擎，<code>ADMIN_URL</code>环境变量务必设置正确：<br><img src="https://media.canheting.cn/img/1586764761081.jpg"></p><p>选择resend-mails云函数，Cron表达式为<code>0 0 8 * * ?</code>，表示每天早8点检查过去24小时内漏发的通知邮件并补发：<br><img src="https://media.canheting.cn/img/1586764769756.jpg" alt="通知检查"></p><p><strong>添加定时器后记得点击启动方可生效。</strong></p><p><strong>至此，Valine Admin 已经可以正常工作，更多<a href="https://github.com/DesertsP/Valine-Admin#%E8%87%B3%E6%AD%A4valine-admin-%E5%B7%B2%E7%BB%8F%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E5%B7%A5%E4%BD%9C%E6%9B%B4%E5%A4%9A%E4%BB%A5%E4%B8%8B%E6%98%AF%E5%8F%AF%E9%80%89%E7%9A%84%E8%BF%9B%E9%98%B6%E9%85%8D%E7%BD%AE">可选的进阶配置</a>查看原文介绍。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Valine </tag>
            
            <tag> Valine-Admin </tag>
            
            <tag> 网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Gridea中添加Valine评论系统</title>
      <link href="/posts/aa0a7d5f/"/>
      <url>/posts/aa0a7d5f/</url>
      
        <content type="html"><![CDATA[<p>Valine - 一款快速、简洁且高效的无后端评论系统。</p><p> Gridea 提供了两个评论系统，Gitalk 和 Disqus。Gitalk 需要使用 Github 账号登录，对于没Github 账号的人来说不太方便，Disqus 目前在国内不可用。对比了可用于静态博客的国内评论系统，最终选用了 Valine。</p><h2 id="Valine-特性👇"><a href="#Valine-特性👇" class="headerlink" title="Valine 特性👇"></a>Valine 特性👇</h2><ul><li>快速</li><li>安全</li><li>Emoji 😉</li><li>无后端实现</li><li>MarkDown 全语法支持</li><li>轻量易用(~15kb gzipped)</li><li>文章阅读量统计 v1.2.0+</li></ul><h2 id="快速上手-Valine"><a href="#快速上手-Valine" class="headerlink" title="快速上手 Valine"></a>快速上手 Valine</h2><h3 id="获取-APPID-和-APPKey"><a href="#获取-APPID-和-APPKey" class="headerlink" title="获取 APPID 和 APPKey"></a>获取 <strong>APPID</strong> 和 <strong>APPKey</strong></h3><p>Valine 是基于 <a href="https://www.leancloud.cn/">LeanCloud</a> 开发的，所以需要注册账号来使用。首先登录或注册 <a href="https://www.leancloud.cn/">LeanCloud</a>, 然后进入控制台后点击左下角创建应用：</p><p><img src="https://media.canheting.cn/img/1586595020015.jpg"></p><p>进入刚刚创建的应用，选择左下角的设置&gt;应用 Keys，然后就能看到你的 <strong>APPID</strong> 和 <strong>APPKey</strong> 了：<br><img src="https://media.canheting.cn/img/1586595106836.jpg"></p><h3 id="在网页中插入-Valine"><a href="#在网页中插入-Valine" class="headerlink" title="在网页中插入 Valine"></a>在网页中插入 Valine</h3><p>确认你是用的是哪个模板（我使用的是 Notes），然后在 Gridea theme 文件夹中找到相应的模板，并在 <code>head.ejs</code> 中引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&#x27;//unpkg.com/valine/dist/Valine.min.js&#x27;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://media.canheting.cn/img/1586595765846.jpg"><br>在文章下面添加 Valine 的评论框，在 <code>post.ejs</code> 中插入以下代码。修改初始化对象中的 <strong>appId</strong> 和 <strong>appKey</strong> 的值为上面刚刚获取到的值即可。更多信息请查看<a href="https://valine.js.org/configuration.html">配置项</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vcomments&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Valine</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#vcomments&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">appId</span>: <span class="string">&#x27;&lt;API_ID&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">appKey</span>: <span class="string">&#x27;&lt;API_Key&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://media.canheting.cn/img/1586596027242.jpg"><br><img src="https://media.canheting.cn/img/1586596324924.jpg"><br>打开文章详情页，显示评论框就成功了。<br><img src="https://media.canheting.cn/img/1586596974577.jpg"><br>评论可以在  <a href="https://www.leancloud.cn/">LeanCloud</a> 的后台进行管理。<br><img src="https://media.canheting.cn/img/1586596674976.jpg"><br>但这样管理并不理想，下一部分，使用 Valine-Admin 来对评论进行管理。</p><blockquote><p><a href="https://github.com/DesertsP/Valine-Admin">Valine Admin</a>  是 <a href="https://deserts.io/diy-a-comment-system/">Valine 评论系统</a>的扩展和增强，主要实现评论邮件通知、评论管理、垃圾评论过滤等功能。支持完全自定义的邮件通知模板。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Valine </tag>
            
            <tag> Gridea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Gridea</title>
      <link href="/posts/6143bcfc/"/>
      <url>/posts/6143bcfc/</url>
      
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意… …</p><span id="more"></span><p><a href="https://github.com/getgridea/gridea">Github</a><br><a href="https://gridea.dev/">Gridea 主页</a><br><a href="http://fehey.com/">示例网站</a></p><h2 id="特性👇"><a href="#特性👇" class="headerlink" title="特性👇"></a>特性👇</h2><p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作  </p><p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片  </p><p>🏷️  你可以对文章进行标签分组  </p><p>📋  你可以自定义菜单，甚至可以创建外部链接菜单  </p><p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端  </p><p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台  </p><p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统  </p><p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong>  </p><p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力  </p><p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步  </p><p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p><p>未来，它一定会成为你离不开的伙伴</p><p>尽情发挥你的才华吧！</p><p>😘 Enjoy~</p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gridea </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
